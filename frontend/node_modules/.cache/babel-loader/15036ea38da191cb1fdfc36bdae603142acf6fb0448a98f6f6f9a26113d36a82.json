{"ast":null,"code":"import axios from 'axios';\n// API 베이스 URL 설정\nconst API_BASE_URL = '/api';\n\n// Axios 인스턴스 생성\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 400000,\n  // 약 6.7분 (영상 생성 시간 고려)\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - 인증 토큰 추가\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 에러 처리\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 인증 오류시 로그아웃 처리\n    localStorage.removeItem('authToken');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // 서버 상태 확인\n  async checkHealth() {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n  // BGM 목록 조회\n  async getBgmList() {\n    try {\n      const response = await apiClient.get('/bgm-list');\n      if (response.data.status === 'success') {\n        const bgmData = response.data.data;\n        return Object.values(bgmData);\n      } else {\n        throw new Error(response.data.message || 'BGM 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error('BGM 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 특정 성격의 BGM 파일 목록 조회\n  async getBgmFiles(mood) {\n    try {\n      const response = await apiClient.get(`/bgm/${mood}`);\n      if (response.data.status === 'success') {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'BGM 파일 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error(`BGM 파일 목록 조회 실패 (${mood}):`, error);\n      throw error;\n    }\n  },\n  // 영상 생성\n  async generateVideo(data) {\n    const formData = new FormData();\n\n    // JSON 데이터 추가\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script' ? '1_per_image' : data.imageUploadMode === 'per-two-scripts' ? '2_per_image' : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 추가\n    formData.append('text_position', data.textPosition);\n\n    // 텍스트 스타일 추가\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 전환 효과 설정 추가\n    console.log('🔍 [API] transition_effect 전송:', data.transitionEffect);\n    formData.append('transition_effect', data.transitionEffect);\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      // 이미지 파일을 FormData로 직접 첨부\n      data.images.forEach((image, index) => {\n        formData.append(`image_${index + 1}`, image, `${index + 1}.${image.name.split('.').pop()}`);\n      });\n      // image_urls는 빈 배열로 전송 (파일 업로드 방식 사용)\n      formData.append('image_urls', '[]');\n    } else {\n      formData.append('image_urls', '[]');\n    }\n    try {\n      const response = await apiClient.post('/generate-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('영상 생성 실패:', error);\n      throw error;\n    }\n  },\n  // 영상 파일 다운로드 URL 생성\n  getVideoDownloadUrl(videoPath) {\n    // video_path에서 파일명 추출\n    const filename = videoPath.split('/').pop();\n    return `/videos/${filename}`;\n  },\n  // BGM 파일 URL 생성 (미리듣기용)\n  getBgmUrl(mood, filename) {\n    return `/bgm/${mood}/${encodeURIComponent(filename)}`;\n  },\n  // 배치 작업 관련 API 메서드들\n\n  // 비동기 영상 생성 요청\n  async generateVideoAsync(data) {\n    const formData = new FormData();\n\n    // 필수 데이터 추가\n    formData.append('user_email', data.userEmail);\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script' ? '1_per_image' : data.imageUploadMode === 'per-two-scripts' ? '2_per_image' : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 및 스타일 추가\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 전환 효과 설정 추가\n    console.log('🔍 [API] transition_effect 전송:', data.transitionEffect);\n    formData.append('transition_effect', data.transitionEffect);\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      data.images.forEach((image, index) => {\n        formData.append(`image_${index + 1}`, image, `${index + 1}.${image.name.split('.').pop()}`);\n      });\n    }\n    try {\n      const response = await apiClient.post('/generate-video-async', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('비동기 영상 생성 요청 실패:', error);\n      throw error;\n    }\n  },\n  // 작업 상태 조회\n  async getJobStatus(jobId) {\n    try {\n      const response = await apiClient.get(`/job-status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('작업 상태 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 큐 통계 조회 (관리용)\n  async getQueueStats() {\n    try {\n      const response = await apiClient.get('/queue-stats');\n      return response.data;\n    } catch (error) {\n      console.error('큐 통계 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 보안 다운로드 링크 생성\n  getSecureDownloadUrl(token) {\n    return `/api/download-video?token=${encodeURIComponent(token)}`;\n  },\n  // 미리보기 생성\n  async generatePreview(data) {\n    const formData = new FormData();\n    formData.append('title', data.title);\n    formData.append('body1', data.body1);\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n    formData.append('title_area_mode', data.titleAreaMode);\n    formData.append('title_font', data.titleFont);\n    formData.append('body_font', data.bodyFont);\n    if (data.image) {\n      formData.append('image_1', data.image);\n    }\n    try {\n      const response = await apiClient.post('/preview-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('미리보기 생성 실패:', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","status","removeItem","window","location","href","apiService","checkHealth","get","data","getBgmList","bgmData","Object","values","Error","message","getBgmFiles","mood","generateVideo","formData","FormData","append","content","musicMood","String","useTestFiles","backendImageMode","imageUploadMode","textPosition","textStyle","titleAreaMode","voiceNarration","log","transitionEffect","titleFont","bodyFont","musicFile","filename","images","length","forEach","image","index","name","split","pop","post","getVideoDownloadUrl","videoPath","getBgmUrl","encodeURIComponent","generateVideoAsync","userEmail","getJobStatus","jobId","getQueueStats","getSecureDownloadUrl","generatePreview","title","body1"],"sources":["/zstus/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, GenerateVideoRequest, MusicFolder, MusicFile, MusicMood, ImageUploadMode, TextPosition, TextStyle, AsyncVideoRequest, AsyncVideoResponse, JobInfo, VoiceNarration, TitleAreaMode, TransitionEffect } from '../types';\n\n// API 베이스 URL 설정\nconst API_BASE_URL = '/api';\n\n// Axios 인스턴스 생성\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 400000, // 약 6.7분 (영상 생성 시간 고려)\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - 인증 토큰 추가\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 에러 처리\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    if (error.response?.status === 401) {\n      // 인증 오류시 로그아웃 처리\n      localStorage.removeItem('authToken');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // 서버 상태 확인\n  async checkHealth(): Promise<ApiResponse> {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n\n  // BGM 목록 조회\n  async getBgmList(): Promise<MusicFolder[]> {\n    try {\n      const response = await apiClient.get('/bgm-list');\n      if (response.data.status === 'success') {\n        const bgmData = response.data.data;\n        return Object.values(bgmData) as MusicFolder[];\n      } else {\n        throw new Error(response.data.message || 'BGM 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error('BGM 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 특정 성격의 BGM 파일 목록 조회\n  async getBgmFiles(mood: MusicMood): Promise<MusicFile[]> {\n    try {\n      const response = await apiClient.get(`/bgm/${mood}`);\n      if (response.data.status === 'success') {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'BGM 파일 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error(`BGM 파일 목록 조회 실패 (${mood}):`, error);\n      throw error;\n    }\n  },\n\n  // 영상 생성\n  async generateVideo(data: {\n    content: string;\n    images: File[];\n    imageUploadMode: ImageUploadMode;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    musicFile?: MusicFile;\n    musicMood: MusicMood;\n    useTestFiles?: boolean;\n    titleFont?: string;\n    bodyFont?: string;\n    voiceNarration: VoiceNarration;\n    transitionEffect: TransitionEffect;\n  }): Promise<ApiResponse> {\n    const formData = new FormData();\n    \n    // JSON 데이터 추가\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script'\n      ? '1_per_image'\n      : data.imageUploadMode === 'per-two-scripts'\n        ? '2_per_image'\n        : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 추가\n    formData.append('text_position', data.textPosition);\n\n    // 텍스트 스타일 추가\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 전환 효과 설정 추가\n    console.log('🔍 [API] transition_effect 전송:', data.transitionEffect);\n    formData.append('transition_effect', data.transitionEffect);\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      // 이미지 파일을 FormData로 직접 첨부\n      data.images.forEach((image, index) => {\n        formData.append(`image_${index + 1}`, image, `${index + 1}.${image.name.split('.').pop()}`);\n      });\n      // image_urls는 빈 배열로 전송 (파일 업로드 방식 사용)\n      formData.append('image_urls', '[]');\n    } else {\n      formData.append('image_urls', '[]');\n    }\n\n    try {\n      const response = await apiClient.post('/generate-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('영상 생성 실패:', error);\n      throw error;\n    }\n  },\n\n  // 영상 파일 다운로드 URL 생성\n  getVideoDownloadUrl(videoPath: string): string {\n    // video_path에서 파일명 추출\n    const filename = videoPath.split('/').pop();\n    return `/videos/${filename}`;\n  },\n\n  // BGM 파일 URL 생성 (미리듣기용)\n  getBgmUrl(mood: MusicMood, filename: string): string {\n    return `/bgm/${mood}/${encodeURIComponent(filename)}`;\n  },\n\n  // 배치 작업 관련 API 메서드들\n\n  // 비동기 영상 생성 요청\n  async generateVideoAsync(data: {\n    userEmail: string;\n    content: string;\n    images: File[];\n    imageUploadMode: ImageUploadMode;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    musicFile?: MusicFile;\n    musicMood: MusicMood;\n    useTestFiles?: boolean;\n    titleFont?: string;\n    bodyFont?: string;\n    voiceNarration: VoiceNarration;\n    transitionEffect: TransitionEffect;\n  }): Promise<AsyncVideoResponse> {\n    const formData = new FormData();\n\n    // 필수 데이터 추가\n    formData.append('user_email', data.userEmail);\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script'\n      ? '1_per_image'\n      : data.imageUploadMode === 'per-two-scripts'\n        ? '2_per_image'\n        : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 및 스타일 추가\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 전환 효과 설정 추가\n    console.log('🔍 [API] transition_effect 전송:', data.transitionEffect);\n    formData.append('transition_effect', data.transitionEffect);\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      data.images.forEach((image, index) => {\n        formData.append(`image_${index + 1}`, image, `${index + 1}.${image.name.split('.').pop()}`);\n      });\n    }\n\n    try {\n      const response = await apiClient.post('/generate-video-async', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('비동기 영상 생성 요청 실패:', error);\n      throw error;\n    }\n  },\n\n  // 작업 상태 조회\n  async getJobStatus(jobId: string): Promise<JobInfo> {\n    try {\n      const response = await apiClient.get(`/job-status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('작업 상태 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 큐 통계 조회 (관리용)\n  async getQueueStats(): Promise<{ status: string; stats: any }> {\n    try {\n      const response = await apiClient.get('/queue-stats');\n      return response.data;\n    } catch (error) {\n      console.error('큐 통계 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 보안 다운로드 링크 생성\n  getSecureDownloadUrl(token: string): string {\n    return `/api/download-video?token=${encodeURIComponent(token)}`;\n  },\n\n  // 미리보기 생성\n  async generatePreview(data: {\n    title: string;\n    body1: string;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    titleFont: string;\n    bodyFont: string;\n    image?: File;\n  }): Promise<{ status: string; preview_url: string; message: string }> {\n    const formData = new FormData();\n\n    formData.append('title', data.title);\n    formData.append('body1', data.body1);\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n    formData.append('title_area_mode', data.titleAreaMode);\n    formData.append('title_font', data.titleFont);\n    formData.append('body_font', data.bodyFont);\n\n    if (data.image) {\n      formData.append('image_1', data.image);\n    }\n\n    try {\n      const response = await apiClient.post('/preview-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('미리보기 생성 실패:', error);\n      throw error;\n    }\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}