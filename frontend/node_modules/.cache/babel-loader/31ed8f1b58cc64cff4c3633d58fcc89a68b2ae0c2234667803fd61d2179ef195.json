{"ast":null,"code":"var _jsxFileName = \"/zstus/frontend/src/components/TextImagePairManager.tsx\",\n  _s3 = $RefreshSig$();\nimport React, { useState, useCallback, useMemo, memo, useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport { Box, Typography, Button, Grid, Card, CardContent, IconButton, Alert, CircularProgress, TextField, FormControlLabel, Switch, Collapse } from '@mui/material';\nimport { CloudUpload, Delete, AutoFixHigh, Refresh, Download, ExpandMore, ExpandLess, Movie as MovieIcon, VideoLibrary } from '@mui/icons-material';\nimport { useDropzone } from 'react-dropzone';\nimport MediaBookmarkModal from './MediaBookmarkModal';\nimport apiService from '../services/api';\n\n// ✅ ref를 통해 외부에서 접근 가능한 메서드 타입 정의\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextImagePairManager = /*#__PURE__*/_s3(/*#__PURE__*/forwardRef(_c = _s3(({\n  content,\n  imageUploadMode,\n  images,\n  jobId,\n  imagePanningOptions,\n  // 🎨 props에서 받기\n  onChange,\n  onPanningOptionsChange // 🎨 props에서 받기\n}, ref) => {\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  _s3();\n  const [generationStatus, setGenerationStatus] = useState({});\n  const [generationType, setGenerationType] = useState({});\n  const [uploadErrors, setUploadErrors] = useState({});\n  const [customPrompts, setCustomPrompts] = useState({});\n  const [promptsExpanded, setPromptsExpanded] = useState({});\n  const [bookmarkModalOpen, setBookmarkModalOpen] = useState(false);\n  const [currentBookmarkIndex, setCurrentBookmarkIndex] = useState(null);\n\n  // 🎨 이미지 개수가 변경될 때마다 패닝 옵션 초기화 (기본값: true)\n  useEffect(() => {\n    const imageCount = images.length;\n    if (imageCount === 0) return; // 이미지가 없으면 초기화 안 함\n\n    const newOptions = {};\n    let hasChanges = false;\n    for (let i = 0; i < imageCount; i++) {\n      // 기존 값이 있으면 유지, 없으면 true로 초기화\n      if (imagePanningOptions[i] !== undefined) {\n        newOptions[i] = imagePanningOptions[i];\n      } else {\n        newOptions[i] = true; // 기본값: 패닝 활성화\n        hasChanges = true;\n      }\n    }\n\n    // 변경사항이 있을 때만 업데이트\n    if (hasChanges) {\n      console.log(`🎨 패닝 옵션 초기화: ${imageCount}개 이미지에 대해 기본값 설정`, newOptions);\n      onPanningOptionsChange(newOptions);\n    }\n  }, [images.length, images]);\n\n  // ✅ Uncontrolled TextField를 위한 ref 저장소\n  const textFieldRefs = useRef({});\n  const customPromptRefs = useRef({});\n\n  // ✅ TextField의 현재 값 캐시 (재렌더링 시 값 복원용)\n  const textFieldValuesCache = useRef({});\n  const customPromptValuesCache = useRef({});\n\n  // 최신 images 상태를 추적하기 위한 ref\n  const imagesRef = useRef(images);\n\n  // images prop이 변경될 때마다 ref 업데이트\n  useEffect(() => {\n    imagesRef.current = images;\n  }, [images]);\n\n  // ✅ ref를 통해 외부에서 데이터를 가져갈 수 있도록 메서드 제공\n  useImperativeHandle(ref, () => ({\n    getEditedData: () => {\n      // ✅ TextField ref에서 현재 값 읽기\n      const editedTexts = {};\n      Object.keys(textFieldRefs.current).forEach(key => {\n        var _textFieldRefs$curren;\n        // ✅ imageIndex-textIdx 형태만 처리 (예: \"0-0\", \"1-1\")\n        // stableRefKey 형태(예: \"body1-0\")는 건너뜀\n        const parts = key.split('-');\n        if (parts.length !== 2) return; // body1+body2 같은 경우 건너뜀\n\n        const imageIndex = parseInt(parts[0]);\n        const textIdx = parseInt(parts[1]);\n\n        // 숫자로 파싱 가능한 경우만 처리\n        if (isNaN(imageIndex) || isNaN(textIdx)) return;\n        const value = ((_textFieldRefs$curren = textFieldRefs.current[key]) === null || _textFieldRefs$curren === void 0 ? void 0 : _textFieldRefs$curren.value) || '';\n        if (!editedTexts[imageIndex]) {\n          editedTexts[imageIndex] = [];\n        }\n        editedTexts[imageIndex][textIdx] = value;\n      });\n\n      // ✅ customPrompt ref에서 현재 값 읽기\n      const customPromptsData = {};\n      Object.keys(customPromptRefs.current).forEach(indexStr => {\n        var _customPromptRefs$cur, _customPrompts$imageI;\n        const imageIndex = parseInt(indexStr);\n        const promptValue = ((_customPromptRefs$cur = customPromptRefs.current[imageIndex]) === null || _customPromptRefs$cur === void 0 ? void 0 : _customPromptRefs$cur.value) || '';\n        const enabled = ((_customPrompts$imageI = customPrompts[imageIndex]) === null || _customPrompts$imageI === void 0 ? void 0 : _customPrompts$imageI.enabled) || false;\n        if (promptValue || enabled) {\n          customPromptsData[imageIndex] = {\n            imageIndex,\n            prompt: promptValue,\n            enabled\n          };\n        }\n      });\n      return {\n        editedTexts,\n        customPrompts: customPromptsData,\n        imagePanningOptions: imagePanningOptions\n      };\n    }\n  }), [customPrompts, imagePanningOptions]); // customPrompts와 imagePanningOptions 의존\n\n  // ✅ 커스텀 프롬프트 토글 (enabled 상태만 관리)\n  const toggleCustomPrompt = (imageIndex, enabled) => {\n    setCustomPrompts(prev => {\n      var _prev$imageIndex;\n      return {\n        ...prev,\n        [imageIndex]: {\n          imageIndex,\n          prompt: ((_prev$imageIndex = prev[imageIndex]) === null || _prev$imageIndex === void 0 ? void 0 : _prev$imageIndex.prompt) || '',\n          enabled\n        }\n      };\n    });\n  };\n  const togglePromptExpanded = imageIndex => {\n    setPromptsExpanded(prev => ({\n      ...prev,\n      [imageIndex]: !prev[imageIndex]\n    }));\n  };\n\n  // 🎨 패닝 옵션 토글 함수\n  const togglePanningOption = (imageIndex, enabled) => {\n    const newOptions = {\n      ...imagePanningOptions,\n      [imageIndex]: enabled\n    };\n    console.log(`🎨 패닝 옵션 변경 - imageIndex: ${imageIndex}, enabled: ${enabled}`);\n    console.log(`🎨 전체 패닝 옵션 상태:`, newOptions);\n    onPanningOptionsChange(newOptions); // 🎨 props 핸들러 호출\n  };\n\n  // 텍스트-이미지 쌍 데이터 생성 (useMemo로 최적화)\n  // ✅ editedTexts 의존성 제거 - TextField 입력 시 재계산 방지\n  const textImagePairs = useMemo(() => {\n    const bodyTexts = Object.entries(content).filter(([key, value]) => key.startsWith('body') && (value === null || value === void 0 ? void 0 : value.trim())).map(([key, value], index) => ({\n      key,\n      value: value.trim(),\n      index\n    }));\n\n    // 위치 정보를 가진 이미지들을 맵으로 생성\n    const imageMap = new Map();\n    images.forEach(img => {\n      const storedIndex = img.__imageIndex;\n      if (typeof storedIndex === 'number') {\n        imageMap.set(storedIndex, img);\n      }\n    });\n    console.log('🗺️ createTextImagePairs - imageMap:', Array.from(imageMap.entries()).map(([idx, file]) => `${idx}:${file.name}`));\n    console.log('📝 bodyTexts 길이:', bodyTexts.length, 'imageUploadMode:', imageUploadMode);\n    console.log('🔍 받은 images 배열:', images.map(img => `${img.name}(__imageIndex:${img.__imageIndex})`));\n    const pairs = [];\n    if (imageUploadMode === 'per-script') {\n      // 텍스트 1개당 이미지 1개\n      bodyTexts.forEach(({\n        key,\n        value,\n        index\n      }) => {\n        const foundImage = imageMap.get(index);\n        const customPrompt = customPrompts[index];\n\n        // 원본 텍스트 배열 (per-script는 1개)\n        const originalTexts = [value];\n        console.log(`📋 per-script: textIndex=${index}, imageIndex=${index}, foundImage=${(foundImage === null || foundImage === void 0 ? void 0 : foundImage.name) || 'null'}`);\n        pairs.push({\n          textIndex: index,\n          textKey: key,\n          textContent: value,\n          image: foundImage || null,\n          imageIndex: index,\n          isGenerating: false,\n          customPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.prompt) || '',\n          useCustomPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.enabled) || false,\n          originalTexts: originalTexts\n        });\n      });\n    } else if (imageUploadMode === 'per-two-scripts') {\n      // 텍스트 2개당 이미지 1개\n      for (let i = 0; i < bodyTexts.length; i += 2) {\n        const imageIndex = Math.floor(i / 2);\n        const text1 = bodyTexts[i];\n        const text2 = bodyTexts[i + 1];\n        if (text1) {\n          const foundImage = imageMap.get(imageIndex);\n          const customPrompt = customPrompts[imageIndex];\n\n          // 원본 텍스트 배열\n          const originalTexts = [text1.value, text2 === null || text2 === void 0 ? void 0 : text2.value].filter(Boolean);\n          console.log(`📋 per-two-scripts: textIndex=${i}, imageIndex=${imageIndex}, foundImage=${(foundImage === null || foundImage === void 0 ? void 0 : foundImage.name) || 'null'}`);\n          pairs.push({\n            textIndex: i,\n            textKey: `${text1.key}${text2 ? `+${text2.key}` : ''}`,\n            textContent: `${text1.value}${text2 ? ` / ${text2.value}` : ''}`,\n            image: foundImage || null,\n            imageIndex: imageIndex,\n            isGenerating: false,\n            customPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.prompt) || '',\n            useCustomPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.enabled) || false,\n            originalTexts: originalTexts\n          });\n        }\n      }\n    } else if (imageUploadMode === 'single-for-all') {\n      // 모든 텍스트에 이미지 1개\n      const allTexts = bodyTexts.map(({\n        key,\n        value\n      }) => key.replace('body', '대사')).join(' + ');\n      const allContent = bodyTexts.map(({\n        value\n      }) => value).join(' / ');\n      const foundImage = imageMap.get(0);\n      const customPrompt = customPrompts[0];\n\n      // 원본 텍스트 배열 (모든 대사)\n      const originalTexts = bodyTexts.map(({\n        value\n      }) => value);\n      console.log(`📋 single-for-all: 모든 대사, imageIndex=0, foundImage=${(foundImage === null || foundImage === void 0 ? void 0 : foundImage.name) || 'null'}`);\n      pairs.push({\n        textIndex: 0,\n        textKey: allTexts,\n        textContent: allContent,\n        image: foundImage || null,\n        imageIndex: 0,\n        isGenerating: false,\n        customPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.prompt) || '',\n        useCustomPrompt: (customPrompt === null || customPrompt === void 0 ? void 0 : customPrompt.enabled) || false,\n        originalTexts: originalTexts\n      });\n    }\n    console.log('🎯 최종 pairs 개수:', pairs.length);\n    return pairs;\n  }, [content, images, imageUploadMode, customPrompts]);\n\n  // 현재 images 배열 상태 로깅\n  console.log('📦 현재 images 배열 길이:', images.length);\n  console.log('📦 현재 images 배열:', images.length > 0 ? images.map(img => `${img.name}(index:${img.__imageIndex})`) : '빈 배열');\n  console.log('🎮 generationStatus:', generationStatus);\n\n  // 개별 이미지 업로드 핸들러\n  const handleIndividualImageUpload = useCallback((imageIndex, acceptedFiles) => {\n    if (acceptedFiles.length === 0) return;\n    const file = acceptedFiles[0];\n\n    // 기존 에러 상태 제거\n    setUploadErrors(prev => {\n      const newErrors = {\n        ...prev\n      };\n      delete newErrors[imageIndex];\n      return newErrors;\n    });\n\n    // 파일 유효성 검증 (모드에 따라 다른 제한)\n    const maxSize = imageUploadMode === 'single-for-all' ? 80 * 1024 * 1024 : 40 * 1024 * 1024;\n    const maxSizeText = imageUploadMode === 'single-for-all' ? '80MB' : '40MB';\n    if (file.size > maxSize) {\n      setUploadErrors(prev => ({\n        ...prev,\n        [imageIndex]: `파일 크기가 ${maxSizeText}를 초과합니다`\n      }));\n      return;\n    }\n\n    // 파일 형식 검증 (MIME 타입 + 확장자)\n    const fileName = file.name.toLowerCase();\n    const isImageByType = file.type.startsWith('image/');\n    const isVideoByType = file.type.startsWith('video/');\n\n    // HEIC/HEIF는 브라우저에서 MIME 타입이 없을 수 있으므로 확장자로 검증\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.heic', '.heif'];\n    const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.mkv'];\n    const isImageByExt = imageExtensions.some(ext => fileName.endsWith(ext));\n    const isVideoByExt = videoExtensions.some(ext => fileName.endsWith(ext));\n    const isImage = isImageByType || isImageByExt;\n    const isVideo = isVideoByType || isVideoByExt;\n    if (!isImage && !isVideo) {\n      setUploadErrors(prev => ({\n        ...prev,\n        [imageIndex]: '이미지 또는 비디오 파일만 업로드 가능합니다'\n      }));\n      return;\n    }\n    console.log('🔧 handleIndividualImageUpload - imageIndex:', imageIndex, 'fileName:', file.name);\n\n    // 파일에 위치 정보 추가\n    file.__imageIndex = imageIndex;\n    console.log('🏷️ 파일에 __imageIndex 설정:', imageIndex);\n\n    // 최신 images 상태를 가져와서 업데이트\n    const currentImages = imagesRef.current;\n    console.log('🔄 업데이트 전 currentImages (ref):', currentImages.map(img => `${img.name}(index:${img.__imageIndex})`));\n\n    // 현재 images에서 해당 imageIndex를 가진 파일 제거하고 새 파일 추가\n    const newImages = currentImages.filter(img => img.__imageIndex !== imageIndex);\n    newImages.push(file);\n\n    // imageIndex 순으로 정렬\n    newImages.sort((a, b) => {\n      var _imageIndex, _imageIndex2;\n      const indexA = (_imageIndex = a.__imageIndex) !== null && _imageIndex !== void 0 ? _imageIndex : 0;\n      const indexB = (_imageIndex2 = b.__imageIndex) !== null && _imageIndex2 !== void 0 ? _imageIndex2 : 0;\n      return indexA - indexB;\n    });\n    console.log('📊 업데이트된 images 배열:', newImages.map(img => `${img.name}(index:${img.__imageIndex})`));\n    onChange(newImages, imageUploadMode);\n  }, [imageUploadMode, onChange]); // images 의존성 제거\n\n  // 개별 이미지 자동 생성\n  const handleIndividualGenerate = async (imageIndex, pair, customPrompt, useCustomPrompt) => {\n    console.log('🤖 handleIndividualGenerate 시작 - imageIndex:', imageIndex, 'pair:', pair, 'customPrompt:', customPrompt, 'useCustomPrompt:', useCustomPrompt);\n    setGenerationStatus(prev => ({\n      ...prev,\n      [imageIndex]: 'generating'\n    }));\n    setGenerationType(prev => ({\n      ...prev,\n      [imageIndex]: 'ai'\n    }));\n    try {\n      // 요청 바디 구성\n      let requestBody = {\n        job_id: jobId // Job ID 추가\n      };\n\n      // 🎯 우선순위 1: 커스텀 프롬프트\n      if (useCustomPrompt && customPrompt !== null && customPrompt !== void 0 && customPrompt.trim()) {\n        requestBody.custom_prompt = customPrompt.trim();\n        console.log('📝 [우선순위 1] 커스텀 프롬프트 사용:', customPrompt.trim());\n      }\n      // 🎯 우선순위 2: 수정된 텍스트 (TextField ref에서 읽기)\n      else {\n        var _textFieldRefs$curren2, _textFieldRefs$curren3;\n        // ✅ TextField ref에서 현재 입력된 값 읽기\n        const editedText0 = ((_textFieldRefs$curren2 = textFieldRefs.current[`${imageIndex}-0`]) === null || _textFieldRefs$curren2 === void 0 ? void 0 : _textFieldRefs$curren2.value) || '';\n        const editedText1 = ((_textFieldRefs$curren3 = textFieldRefs.current[`${imageIndex}-1`]) === null || _textFieldRefs$curren3 === void 0 ? void 0 : _textFieldRefs$curren3.value) || '';\n\n        // originalTexts 가져오기\n        const originalTexts = pair.originalTexts || [];\n\n        // 수정된 텍스트가 있는지 확인\n        const hasEditedText0 = editedText0 && editedText0 !== originalTexts[0];\n        const hasEditedText1 = editedText1 && editedText1 !== originalTexts[1];\n        if (hasEditedText0 || hasEditedText1) {\n          // 수정된 텍스트 사용\n          requestBody.text = editedText0 || originalTexts[0];\n          if (editedText1 || originalTexts[1]) {\n            requestBody.additional_context = editedText1 || originalTexts[1];\n          }\n          console.log('📝 [우선순위 2] 수정된 텍스트 사용 (ref에서 읽음):', requestBody.text);\n        } else {\n          // 원본 텍스트 사용\n          const texts = pair.textContent.split(' / ');\n          requestBody.text = texts[0];\n          if (texts.length > 1) {\n            requestBody.additional_context = texts[1];\n          }\n          console.log('📝 [우선순위 3] 원본 텍스트 사용:', texts[0]);\n        }\n      }\n      console.log('🚀 요청 바디 (Job ID 포함):', requestBody);\n      const response = await fetch('/generate-single-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '이미지 생성에 실패했습니다');\n      }\n      const data = await response.json();\n      const imageUrl = data.image_url;\n\n      // 생성된 이미지를 다운로드하고 File 객체로 변환\n      const imageResponse = await fetch(imageUrl);\n      if (!imageResponse.ok) {\n        throw new Error('생성된 이미지 다운로드에 실패했습니다');\n      }\n      const blob = await imageResponse.blob();\n      const fileName = `generated_image_pair_${imageIndex}.png`;\n      const file = new File([blob], fileName, {\n        type: 'image/png'\n      });\n      console.log('📸 이미지 생성 완료 - fileName:', fileName, '호출할 imageIndex:', imageIndex);\n\n      // 이미지 배열 업데이트\n      handleIndividualImageUpload(imageIndex, [file]);\n      setGenerationStatus(prev => ({\n        ...prev,\n        [imageIndex]: 'success'\n      }));\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = {\n            ...prev\n          };\n          delete newStatus[imageIndex];\n          return newStatus;\n        });\n      }, 3000);\n    } catch (error) {\n      console.error('개별 이미지 생성 오류:', error);\n      setGenerationStatus(prev => ({\n        ...prev,\n        [imageIndex]: 'error'\n      }));\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = {\n            ...prev\n          };\n          delete newStatus[imageIndex];\n          return newStatus;\n        });\n      }, 5000);\n    }\n  };\n\n  // 개별 이미지 삭제 (개선됨)\n  const handleRemoveImage = imageIndex => {\n    console.log('🗑️ 이미지 삭제 요청 - imageIndex:', imageIndex);\n\n    // 최신 images 상태를 가져와서 삭제\n    const currentImages = imagesRef.current;\n    const newImages = currentImages.filter(img => img.__imageIndex !== imageIndex);\n\n    // 해당 인덱스의 에러 상태도 함께 제거\n    setUploadErrors(prev => {\n      const newErrors = {\n        ...prev\n      };\n      delete newErrors[imageIndex];\n      return newErrors;\n    });\n\n    // 생성 상태도 함께 제거\n    setGenerationStatus(prev => {\n      const newStatus = {\n        ...prev\n      };\n      delete newStatus[imageIndex];\n      return newStatus;\n    });\n    console.log('✅ 이미지 삭제 완료 - imageIndex:', imageIndex);\n    console.log('📊 남은 이미지:', newImages.map(img => `${img.name}(index:${img.__imageIndex})`));\n    onChange(newImages, imageUploadMode);\n  };\n\n  // 개별 이미지 다운로드\n  const handleDownloadImage = async (imageIndex, image) => {\n    try {\n      // 생성된 이미지인지 확인 (filename으로 판단)\n      if (image.name.startsWith('generated_')) {\n        // 백엔드 다운로드 API를 통해 다운로드\n        const link = document.createElement('a');\n        link.href = `/download-image/${image.name}`;\n        link.download = `reels_image_${imageIndex + 1}.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      } else {\n        // 업로드된 파일은 직접 다운로드\n        const url = URL.createObjectURL(image);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `reels_image_${imageIndex + 1}_${image.name}`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }\n      console.log('💾 이미지 다운로드 완료 - imageIndex:', imageIndex, 'fileName:', image.name);\n    } catch (error) {\n      console.error('이미지 다운로드 오류:', error);\n    }\n  };\n\n  // 북마크 모달 열기\n  const handleOpenBookmarkModal = imageIndex => {\n    console.log('🎬 북마크 모달 열기 - imageIndex:', imageIndex);\n    setCurrentBookmarkIndex(imageIndex);\n    setBookmarkModalOpen(true);\n  };\n\n  // 북마크 모달 닫기\n  const handleCloseBookmarkModal = () => {\n    setBookmarkModalOpen(false);\n    setCurrentBookmarkIndex(null);\n  };\n\n  // 북마크 미디어(비디오/이미지) 선택 핸들러\n  const handleSelectBookmarkMedia = async (media, mediaType) => {\n    if (currentBookmarkIndex === null) return;\n    console.log(`✅ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 선택:`, media.filename, 'imageIndex:', currentBookmarkIndex);\n    try {\n      // 생성 상태 업데이트\n      setGenerationStatus(prev => ({\n        ...prev,\n        [currentBookmarkIndex]: 'generating'\n      }));\n      setGenerationType(prev => ({\n        ...prev,\n        [currentBookmarkIndex]: 'bookmark'\n      }));\n\n      // 백엔드 API 호출: 북마크 미디어를 Job 폴더로 복사\n      const response = mediaType === 'video' ? await apiService.copyBookmarkVideo(jobId, media.filename, currentBookmarkIndex) : await apiService.copyBookmarkImage(jobId, media.filename, currentBookmarkIndex);\n      if (response.status === 'success') {\n        var _filename$split$pop;\n        // 복사된 파일을 File 객체로 변환하여 이미지 배열에 추가\n        const fileUrl = response.data.file_url;\n        const filename = response.data.filename;\n\n        // 파일을 Fetch로 가져와서 File 객체 생성\n        const fileResponse = await fetch(fileUrl);\n        if (!fileResponse.ok) {\n          throw new Error(`${mediaType === 'video' ? '비디오' : '이미지'} 파일 다운로드에 실패했습니다`);\n        }\n        const blob = await fileResponse.blob();\n\n        // 파일 타입 결정\n        const ext = (_filename$split$pop = filename.split('.').pop()) === null || _filename$split$pop === void 0 ? void 0 : _filename$split$pop.toLowerCase();\n        let mimeType = 'application/octet-stream';\n        if (mediaType === 'video') {\n          if (ext === 'mp4') mimeType = 'video/mp4';else if (ext === 'mov') mimeType = 'video/quicktime';else if (ext === 'avi') mimeType = 'video/x-msvideo';else if (ext === 'webm') mimeType = 'video/webm';\n        } else {\n          if (ext === 'jpg' || ext === 'jpeg') mimeType = 'image/jpeg';else if (ext === 'png') mimeType = 'image/png';else if (ext === 'webp') mimeType = 'image/webp';else if (ext === 'gif') mimeType = 'image/gif';\n        }\n        const file = new File([blob], filename, {\n          type: mimeType\n        });\n        console.log(`📸 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 파일 생성 완료 - fileName:`, filename, 'imageIndex:', currentBookmarkIndex);\n\n        // 이미지 배열 업데이트\n        handleIndividualImageUpload(currentBookmarkIndex, [file]);\n        setGenerationStatus(prev => ({\n          ...prev,\n          [currentBookmarkIndex]: 'success'\n        }));\n        setTimeout(() => {\n          setGenerationStatus(prev => {\n            const newStatus = {\n              ...prev\n            };\n            delete newStatus[currentBookmarkIndex];\n            return newStatus;\n          });\n        }, 3000);\n        console.log(`✅ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 복사 및 업로드 완료`);\n      }\n    } catch (error) {\n      console.error(`❌ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 선택 오류:`, error);\n      setGenerationStatus(prev => ({\n        ...prev,\n        [currentBookmarkIndex]: 'error'\n      }));\n      setUploadErrors(prev => ({\n        ...prev,\n        [currentBookmarkIndex]: error.message || `북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 불러오기 실패`\n      }));\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = {\n            ...prev\n          };\n          delete newStatus[currentBookmarkIndex];\n          return newStatus;\n        });\n      }, 5000);\n    }\n  };\n\n  // 비디오 미리보기 컴포넌트 (브라우저 직접 재생)\n  const VideoPreview = /*#__PURE__*/_s(/*#__PURE__*/memo(_s(({\n    file\n  }) => {\n    _s();\n    const [videoUrl, setVideoUrl] = useState(null);\n    useEffect(() => {\n      // 브라우저에서 직접 재생할 수 있도록 URL 생성\n      const url = URL.createObjectURL(file);\n      setVideoUrl(url);\n      return () => {\n        if (url) {\n          URL.revokeObjectURL(url);\n        }\n      };\n    }, [file]);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative'\n      },\n      children: [videoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n        src: videoUrl,\n        style: {\n          width: '100%',\n          aspectRatio: '1/1',\n          objectFit: 'cover',\n          borderRadius: '8px'\n        },\n        autoPlay: true,\n        muted: true,\n        loop: true,\n        playsInline: true,\n        controls: false,\n        onError: e => {\n          console.error('비디오 재생 오류:', e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          top: 8,\n          left: 8,\n          bgcolor: 'rgba(0,0,0,0.7)',\n          borderRadius: 1,\n          p: 0.5,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(MovieIcon, {\n          sx: {\n            fontSize: 16,\n            color: 'white'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"white\",\n          sx: {\n            ml: 0.5\n          },\n          children: \"\\uC601\\uC0C1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }, this);\n  }, \"nkRZTjcntyJfhojS751MifEn6dQ=\")), \"nkRZTjcntyJfhojS751MifEn6dQ=\");\n\n  // 개별 드래그앤드롭 컴포넌트 (React.memo로 최적화)\n  const IndividualDropZone = /*#__PURE__*/_s2(/*#__PURE__*/memo(_s2(({\n    imageIndex,\n    pair\n  }) => {\n    _s2();\n    const onDrop = useCallback(acceptedFiles => {\n      handleIndividualImageUpload(imageIndex, acceptedFiles);\n    }, [imageIndex]);\n    const {\n      getRootProps,\n      getInputProps,\n      isDragActive\n    } = useDropzone({\n      onDrop,\n      accept: {\n        'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp', '.heic', '.heif'],\n        'video/*': ['.mp4', '.mov', '.avi', '.webm', '.mkv']\n      },\n      maxFiles: 1,\n      multiple: false\n    });\n    const isGenerating = generationStatus[imageIndex] === 'generating';\n    const generationError = generationStatus[imageIndex] === 'error';\n    const generationSuccess = generationStatus[imageIndex] === 'success';\n    const currentGenerationType = generationType[imageIndex];\n    const uploadError = uploadErrors[imageIndex];\n    const isPromptExpanded = promptsExpanded[imageIndex] || false;\n    const currentCustomPrompt = customPrompts[imageIndex];\n\n    // 🎨 패닝 옵션 상태 (기본값: true)\n    const currentPanningOption = imagePanningOptions[imageIndex] !== undefined ? imagePanningOptions[imageIndex] : true;\n\n    // ✅ 심플한 커스텀 프롬프트 핸들러 (복잡한 로컬 상태/디바운스 제거)\n\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          sx: {\n            fontSize: '0.9rem',\n            fontWeight: 600,\n            color: 'primary.main',\n            mb: 2\n          },\n          children: pair.textKey.replace('body', '대사 ').replace('+body', ' + 대사 ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 11\n        }, this), pair.originalTexts ? /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: pair.originalTexts.map((originalText, idx) => {\n            // ✅ 안정적인 고유 키: textKey 사용 (imageIndex는 순서 변경 시 바뀜)\n            const stableRefKey = `${pair.textKey}-${idx}`;\n            const stableKey = `text-${pair.textKey}-${idx}`;\n\n            // ✅ 캐시된 값이 있으면 사용, 없으면 원본 사용\n            const initialValue = textFieldValuesCache.current[stableRefKey] || originalText;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              multiline: true,\n              minRows: 2,\n              maxRows: 8,\n              defaultValue: initialValue,\n              inputRef: el => {\n                if (el) {\n                  textFieldRefs.current[stableRefKey] = el;\n                  // ✅ imageIndex 기반 ref도 유지 (AI 생성 시 사용)\n                  textFieldRefs.current[`${imageIndex}-${idx}`] = el;\n                }\n              },\n              onChange: e => {\n                // ✅ 값이 변경될 때마다 캐시에 저장\n                textFieldValuesCache.current[stableRefKey] = e.target.value;\n              },\n              label: imageUploadMode === 'per-two-scripts' ? `대사 ${pair.textIndex + idx + 1}` : imageUploadMode === 'per-script' ? `대사 ${pair.textIndex + 1}` : `대사 ${idx + 1}`,\n              variant: \"outlined\",\n              size: \"small\",\n              sx: {\n                mb: 1\n              },\n              helperText: idx === 0 ? \"수정된 텍스트는 영상 생성 시 사용됩니다\" : \"\"\n            }, stableKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            mb: 2,\n            p: 1.5,\n            bgcolor: 'grey.50',\n            borderRadius: 1,\n            border: '1px solid',\n            borderColor: 'grey.200',\n            fontSize: '0.8rem',\n            lineHeight: 1.4\n          },\n          children: pair.textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              sx: {\n                fontWeight: 600\n              },\n              children: \"AI \\uC0DD\\uC131 \\uC635\\uC158\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: () => togglePromptExpanded(imageIndex),\n              sx: {\n                p: 0.5\n              },\n              children: isPromptExpanded ? /*#__PURE__*/_jsxDEV(ExpandLess, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 71\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n            in: isPromptExpanded,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                bgcolor: 'rgba(25, 118, 210, 0.04)',\n                p: 1.5,\n                borderRadius: 1,\n                border: '1px solid rgba(25, 118, 210, 0.12)'\n              },\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: (currentCustomPrompt === null || currentCustomPrompt === void 0 ? void 0 : currentCustomPrompt.enabled) || false,\n                  onChange: e => {\n                    toggleCustomPrompt(imageIndex, e.target.checked);\n                  },\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 21\n                }, this),\n                label: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  sx: {\n                    fontWeight: 500\n                  },\n                  children: \"\\uCEE4\\uC2A4\\uD140 \\uD504\\uB86C\\uD504\\uD2B8 \\uC0AC\\uC6A9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 21\n                }, this),\n                sx: {\n                  mb: 1,\n                  ml: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                multiline: true,\n                rows: 2,\n                size: \"small\",\n                placeholder: \"\\uC774\\uBBF8\\uC9C0 \\uC0DD\\uC131\\uC744 \\uC704\\uD55C \\uCEE4\\uC2A4\\uD140 \\uD504\\uB86C\\uD504\\uD2B8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n                defaultValue: customPromptValuesCache.current[imageIndex] || (currentCustomPrompt === null || currentCustomPrompt === void 0 ? void 0 : currentCustomPrompt.prompt) || '',\n                inputRef: el => {\n                  if (el) customPromptRefs.current[imageIndex] = el;\n                },\n                onChange: e => {\n                  // ✅ 값이 변경될 때마다 캐시에 저장\n                  customPromptValuesCache.current[imageIndex] = e.target.value;\n                },\n                variant: \"outlined\",\n                sx: {\n                  display: currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? 'block' : 'none',\n                  '& .MuiOutlinedInput-root': {\n                    fontSize: '0.75rem',\n                    bgcolor: 'white'\n                  }\n                },\n                helperText: \"\\uC2E4\\uC81C \\uC601\\uC0C1\\uC5D0\\uC11C\\uB294 \\uAE30\\uC874 \\uB300\\uC0AC\\uAC00 \\uC0AC\\uC6A9\\uB418\\uBA70, \\uC774 \\uD504\\uB86C\\uD504\\uD2B8\\uB294 \\uC774\\uBBF8\\uC9C0 \\uC0DD\\uC131\\uC5D0\\uB9CC \\uC0AC\\uC6A9\\uB429\\uB2C8\\uB2E4.\",\n                autoComplete: \"off\",\n                spellCheck: \"false\"\n              }, `prompt-${imageIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 17\n              }, this), !(currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled) && /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"text.secondary\",\n                sx: {\n                  fontStyle: 'italic'\n                },\n                children: \"\\uAE30\\uBCF8 \\uBAA8\\uB4DC: \\uC704\\uC758 \\uB300\\uC0AC \\uB0B4\\uC6A9\\uC744 \\uAE30\\uBC18\\uC73C\\uB85C \\uC774\\uBBF8\\uC9C0\\uB97C \\uC0DD\\uC131\\uD569\\uB2C8\\uB2E4.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), pair.image ? /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'relative',\n            mb: 2\n          },\n          children: [(() => {\n            // 비디오 파일 확인 (MIME 타입 + 확장자)\n            const fileName = pair.image.name.toLowerCase();\n            const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.mkv'];\n            const isVideo = pair.image.type.startsWith('video/') || videoExtensions.some(ext => fileName.endsWith(ext));\n\n            // HEIC 파일 확인\n            const heicExtensions = ['.heic', '.heif'];\n            const isHEIC = heicExtensions.some(ext => fileName.endsWith(ext));\n            if (isVideo) {\n              return /*#__PURE__*/_jsxDEV(VideoPreview, {\n                file: pair.image\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 869,\n                columnNumber: 26\n              }, this);\n            } else if (isHEIC) {\n              // HEIC 파일은 브라우저에서 미리보기 불가 → 파일명 표시\n              return /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  width: '100%',\n                  aspectRatio: '1/1',\n                  backgroundColor: '#f5f5f5',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  flexDirection: 'column',\n                  borderRadius: 1,\n                  border: '2px dashed #ccc'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  color: \"text.secondary\",\n                  children: \"\\uD83D\\uDCF7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 886,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  sx: {\n                    mt: 1,\n                    px: 2,\n                    textAlign: 'center'\n                  },\n                  children: pair.image.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 887,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  children: \"(HEIC \\uD30C\\uC77C - \\uBBF8\\uB9AC\\uBCF4\\uAE30 \\uBD88\\uAC00)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 890,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 873,\n                columnNumber: 21\n              }, this);\n            } else {\n              // 일반 이미지\n              return /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  width: '100%',\n                  aspectRatio: '1/1',\n                  backgroundImage: `url(${URL.createObjectURL(pair.image)})`,\n                  backgroundSize: 'cover',\n                  backgroundPosition: 'center',\n                  borderRadius: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 21\n              }, this);\n            }\n          })(), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              position: 'absolute',\n              top: 8,\n              right: 8,\n              display: 'flex',\n              gap: 0.5\n            },\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: () => handleDownloadImage(imageIndex, pair.image),\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.9)',\n                '&:hover': {\n                  bgcolor: 'rgba(255,255,255,1)'\n                }\n              },\n              title: \"\\uC774\\uBBF8\\uC9C0 \\uB2E4\\uC6B4\\uB85C\\uB4DC\",\n              children: /*#__PURE__*/_jsxDEV(Download, {\n                color: \"success\",\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: () => handleRemoveImage(imageIndex),\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.9)',\n                '&:hover': {\n                  bgcolor: 'rgba(255,255,255,1)'\n                }\n              },\n              title: \"\\uC774\\uBBF8\\uC9C0 \\uC0AD\\uC81C\",\n              children: /*#__PURE__*/_jsxDEV(Delete, {\n                color: \"error\",\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: () => {\n                var _customPromptRefs$cur2;\n                // ✅ ref에서 현재 프롬프트 값 읽기\n                const currentPromptValue = ((_customPromptRefs$cur2 = customPromptRefs.current[imageIndex]) === null || _customPromptRefs$cur2 === void 0 ? void 0 : _customPromptRefs$cur2.value) || '';\n                const isEnabled = (currentCustomPrompt === null || currentCustomPrompt === void 0 ? void 0 : currentCustomPrompt.enabled) || false;\n                console.log('🔄 새로고침 버튼 클릭됨 - imageIndex:', imageIndex, 'pair:', pair);\n                console.log('📝 커스텀 프롬프트 값 (ref에서 읽음):', currentPromptValue);\n                handleIndividualGenerate(imageIndex, pair, currentPromptValue, isEnabled);\n              },\n              disabled: isGenerating,\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.9)',\n                '&:hover': {\n                  bgcolor: 'rgba(255,255,255,1)'\n                }\n              },\n              title: \"\\uC774\\uBBF8\\uC9C0 \\uC7AC\\uC0DD\\uC131\",\n              children: isGenerating ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Refresh, {\n                color: \"primary\",\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 969,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            sx: {\n              position: 'absolute',\n              bottom: 4,\n              left: 8,\n              bgcolor: 'rgba(0,0,0,0.7)',\n              color: 'white',\n              px: 1,\n              py: 0.5,\n              borderRadius: 1\n            },\n            children: pair.image.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 974,\n            columnNumber: 15\n          }, this), !pair.image.type.startsWith('video/') && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2,\n              p: 1.5,\n              bgcolor: 'rgba(76, 175, 80, 0.04)',\n              borderRadius: 1,\n              border: '1px solid rgba(76, 175, 80, 0.2)'\n            },\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: currentPanningOption,\n                onChange: e => togglePanningOption(imageIndex, e.target.checked),\n                size: \"small\",\n                color: \"success\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 998,\n                columnNumber: 23\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  sx: {\n                    fontWeight: 600,\n                    display: 'block'\n                  },\n                  children: \"\\uD83C\\uDFAC \\uD328\\uB2DD \\uD6A8\\uACFC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1007,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  sx: {\n                    fontSize: '0.7rem'\n                  },\n                  children: currentPanningOption ? '이미지가 좌우/상하로 부드럽게 움직입니다' : '이미지가 고정되어 움직이지 않습니다'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1010,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1006,\n                columnNumber: 23\n              }, this),\n              sx: {\n                ml: 0,\n                width: '100%'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          ...getRootProps(),\n          sx: {\n            border: 2,\n            borderColor: isDragActive ? 'primary.main' : 'grey.300',\n            borderStyle: 'dashed',\n            borderRadius: 1,\n            p: 2,\n            textAlign: 'center',\n            cursor: 'pointer',\n            bgcolor: isDragActive ? 'action.hover' : 'background.paper',\n            mb: 2,\n            aspectRatio: '1/1',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            '&:hover': {\n              borderColor: 'primary.main',\n              bgcolor: 'action.hover'\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1045,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'center',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(CloudUpload, {\n              sx: {\n                fontSize: 32,\n                color: 'grey.400',\n                mb: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1046,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            children: isDragActive ? '파일을 놓으세요' : '미디어 드래그 또는 클릭'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1049,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            sx: {\n              display: 'block',\n              mt: 0.5,\n              fontSize: '0.7rem'\n            },\n            children: [\"\\uCD5C\\uB300 \", imageUploadMode === 'single-for-all' ? '40MB' : '10MB']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 13\n        }, this), isGenerating && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          sx: {\n            mt: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 16,\n              sx: {\n                mr: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1062,\n              columnNumber: 17\n            }, this), currentGenerationType === 'bookmark' ? '미디어 불러오는 중...' : '이미지 생성 중...']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1061,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 13\n        }, this), generationSuccess && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"success\",\n          sx: {\n            mt: 1\n          },\n          children: currentGenerationType === 'bookmark' ? '미디어 불러오기 완료!' : '이미지 생성 완료!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this), generationError && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mt: 1\n          },\n          children: currentGenerationType === 'bookmark' ? '미디어 불러오기 실패. 다시 시도해주세요.' : '이미지 생성 실패. 다시 시도해주세요.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 13\n        }, this), uploadError && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mt: 1\n          },\n          children: uploadError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 1.5,\n          pt: 0,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"outlined\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(AutoFixHigh, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 24\n          }, this),\n          onClick: () => {\n            var _customPromptRefs$cur3;\n            // ✅ ref에서 현재 프롬프트 값 읽기\n            const currentPromptValue = ((_customPromptRefs$cur3 = customPromptRefs.current[imageIndex]) === null || _customPromptRefs$cur3 === void 0 ? void 0 : _customPromptRefs$cur3.value) || '';\n            const isEnabled = (currentCustomPrompt === null || currentCustomPrompt === void 0 ? void 0 : currentCustomPrompt.enabled) || false;\n            console.log('🖱️ 자동생성 버튼 클릭됨 - imageIndex:', imageIndex, 'pair:', pair);\n            console.log('📝 커스텀 프롬프트 값 (ref에서 읽음):', currentPromptValue);\n            console.log('✅ 커스텀 프롬프트 enabled:', isEnabled);\n            handleIndividualGenerate(imageIndex, pair, currentPromptValue, isEnabled);\n          },\n          disabled: isGenerating,\n          sx: {\n            bgcolor: currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? 'rgba(25, 118, 210, 0.08)' : 'transparent',\n            borderColor: currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? 'primary.main' : 'grey.300',\n            color: currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? 'primary.main' : 'text.primary',\n            '&:hover': {\n              bgcolor: currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? 'rgba(25, 118, 210, 0.12)' : 'action.hover'\n            }\n          },\n          children: isGenerating ? '생성중...' : currentCustomPrompt !== null && currentCustomPrompt !== void 0 && currentCustomPrompt.enabled ? '커스텀 프롬프트로 생성' : 'AI 자동생성'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"outlined\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(VideoLibrary, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 24\n          }, this),\n          onClick: () => handleOpenBookmarkModal(imageIndex),\n          disabled: isGenerating,\n          sx: {\n            borderColor: 'secondary.main',\n            color: 'secondary.main',\n            '&:hover': {\n              bgcolor: 'rgba(156, 39, 176, 0.08)',\n              borderColor: 'secondary.main'\n            }\n          },\n          children: \"\\uBBF8\\uB514\\uC5B4 \\uBD88\\uB7EC\\uC624\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }, this);\n  }, \"yd//yJtVY5DqPYzQY0xGsdgoRlk=\", false, function () {\n    return [useDropzone];\n  })), \"yd//yJtVY5DqPYzQY0xGsdgoRlk=\", false, function () {\n    return [useDropzone];\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      sx: {\n        mb: 3\n      },\n      children: \"\\uD14D\\uC2A4\\uD2B8-\\uC774\\uBBF8\\uC9C0 \\uB9E4\\uCE6D \\uAD00\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"text.secondary\",\n      sx: {\n        mb: 3\n      },\n      children: [\"\\uAC01 \\uD14D\\uC2A4\\uD2B8\\uC5D0 \\uB300\\uC751\\uB418\\uB294 \\uC774\\uBBF8\\uC9C0\\uB97C \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uAD00\\uB9AC\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uB4DC\\uB798\\uADF8\\uC564\\uB4DC\\uB86D\\uC73C\\uB85C \\uC774\\uBBF8\\uC9C0\\uB97C \\uC5C5\\uB85C\\uB4DC\\uD558\\uAC70\\uB098 AI\\uB85C \\uC790\\uB3D9 \\uC0DD\\uC131\\uD558\\uC138\\uC694.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"span\",\n        variant: \"caption\",\n        color: \"text.secondary\",\n        children: [\"\\uD30C\\uC77C \\uD06C\\uAE30 \\uC81C\\uD55C: \", imageUploadMode === 'single-for-all' ? '최대 40MB' : '각 파일 최대 10MB']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: textImagePairs.map((pair, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(IndividualDropZone, {\n          imageIndex: pair.imageIndex,\n          pair: pair\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1164,\n          columnNumber: 13\n        }, this)\n      }, `dropzone-${pair.imageIndex}-${pair.textKey}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 7\n    }, this), textImagePairs.length === 0 && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mt: 2\n      },\n      children: \"\\uB300\\uBCF8\\uC744 \\uBA3C\\uC800 \\uC791\\uC131\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MediaBookmarkModal, {\n      open: bookmarkModalOpen,\n      onClose: handleCloseBookmarkModal,\n      onSelect: handleSelectBookmarkMedia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1147,\n    columnNumber: 5\n  }, this);\n}, \"47GLaQoSuFjcSlNOIP7SpEcHXUQ=\")), \"47GLaQoSuFjcSlNOIP7SpEcHXUQ=\");\n\n// Display name for debugging\n_c2 = TextImagePairManager;\nTextImagePairManager.displayName = 'TextImagePairManager';\nexport default TextImagePairManager;\nvar _c, _c2;\n$RefreshReg$(_c, \"TextImagePairManager$forwardRef\");\n$RefreshReg$(_c2, \"TextImagePairManager\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","memo","useEffect","useRef","useImperativeHandle","forwardRef","Box","Typography","Button","Grid","Card","CardContent","IconButton","Alert","CircularProgress","TextField","FormControlLabel","Switch","Collapse","CloudUpload","Delete","AutoFixHigh","Refresh","Download","ExpandMore","ExpandLess","Movie","MovieIcon","VideoLibrary","useDropzone","MediaBookmarkModal","apiService","jsxDEV","_jsxDEV","TextImagePairManager","_s3","_c","content","imageUploadMode","images","jobId","imagePanningOptions","onChange","onPanningOptionsChange","ref","_s","$RefreshSig$","_s2","generationStatus","setGenerationStatus","generationType","setGenerationType","uploadErrors","setUploadErrors","customPrompts","setCustomPrompts","promptsExpanded","setPromptsExpanded","bookmarkModalOpen","setBookmarkModalOpen","currentBookmarkIndex","setCurrentBookmarkIndex","imageCount","length","newOptions","hasChanges","i","undefined","console","log","textFieldRefs","customPromptRefs","textFieldValuesCache","customPromptValuesCache","imagesRef","current","getEditedData","editedTexts","Object","keys","forEach","key","_textFieldRefs$curren","parts","split","imageIndex","parseInt","textIdx","isNaN","value","customPromptsData","indexStr","_customPromptRefs$cur","_customPrompts$imageI","promptValue","enabled","prompt","toggleCustomPrompt","prev","_prev$imageIndex","togglePromptExpanded","togglePanningOption","textImagePairs","bodyTexts","entries","filter","startsWith","trim","map","index","imageMap","Map","img","storedIndex","__imageIndex","set","Array","from","idx","file","name","pairs","foundImage","get","customPrompt","originalTexts","push","textIndex","textKey","textContent","image","isGenerating","useCustomPrompt","Math","floor","text1","text2","Boolean","allTexts","replace","join","allContent","handleIndividualImageUpload","acceptedFiles","newErrors","maxSize","maxSizeText","size","fileName","toLowerCase","isImageByType","type","isVideoByType","imageExtensions","videoExtensions","isImageByExt","some","ext","endsWith","isVideoByExt","isImage","isVideo","currentImages","newImages","sort","a","b","_imageIndex","_imageIndex2","indexA","indexB","handleIndividualGenerate","pair","requestBody","job_id","custom_prompt","_textFieldRefs$curren2","_textFieldRefs$curren3","editedText0","editedText1","hasEditedText0","hasEditedText1","text","additional_context","texts","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","data","imageUrl","image_url","imageResponse","blob","File","setTimeout","newStatus","error","handleRemoveImage","handleDownloadImage","link","document","createElement","href","download","appendChild","click","removeChild","url","URL","createObjectURL","revokeObjectURL","handleOpenBookmarkModal","handleCloseBookmarkModal","handleSelectBookmarkMedia","media","mediaType","filename","copyBookmarkVideo","copyBookmarkImage","status","_filename$split$pop","fileUrl","file_url","fileResponse","pop","mimeType","message","VideoPreview","videoUrl","setVideoUrl","sx","position","children","src","style","width","aspectRatio","objectFit","borderRadius","autoPlay","muted","loop","playsInline","controls","onError","e","_jsxFileName","lineNumber","columnNumber","top","left","bgcolor","p","display","alignItems","fontSize","color","variant","ml","IndividualDropZone","onDrop","getRootProps","getInputProps","isDragActive","accept","maxFiles","multiple","generationError","generationSuccess","currentGenerationType","uploadError","isPromptExpanded","currentCustomPrompt","currentPanningOption","height","flexDirection","flex","gutterBottom","fontWeight","mb","originalText","stableRefKey","stableKey","initialValue","fullWidth","multiline","minRows","maxRows","defaultValue","inputRef","el","target","label","helperText","border","borderColor","lineHeight","justifyContent","onClick","in","control","checked","rows","placeholder","autoComplete","spellCheck","fontStyle","heicExtensions","isHEIC","backgroundColor","mt","px","textAlign","backgroundImage","backgroundSize","backgroundPosition","right","gap","title","_customPromptRefs$cur2","currentPromptValue","isEnabled","disabled","bottom","py","borderStyle","cursor","severity","mr","pt","startIcon","_customPromptRefs$cur3","component","container","spacing","item","xs","sm","md","open","onClose","onSelect","_c2","displayName","$RefreshReg$"],"sources":["/zstus/frontend/src/components/TextImagePairManager.tsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, memo, useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  IconButton,\n  Chip,\n  Alert,\n  CircularProgress,\n  TextField,\n  FormControlLabel,\n  Switch,\n  Collapse,\n} from '@mui/material';\nimport {\n  CloudUpload,\n  Delete,\n  AutoFixHigh,\n  Refresh,\n  Image as ImageIcon,\n  Download,\n  Edit as EditIcon,\n  ExpandMore,\n  ExpandLess,\n  Movie as MovieIcon,\n  Warning,\n  VideoLibrary\n} from '@mui/icons-material';\nimport { useDropzone } from 'react-dropzone';\nimport { ReelsContent, ImageUploadMode, TextImagePair, CustomPrompt, BookmarkVideo, BookmarkImage } from '../types';\nimport MediaBookmarkModal from './MediaBookmarkModal';\nimport apiService from '../services/api';\n\ninterface TextImagePairManagerProps {\n  content: ReelsContent;\n  imageUploadMode: ImageUploadMode;\n  images: File[];\n  jobId: string;\n  imagePanningOptions: { [key: number]: boolean }; // 🎨 패닝 옵션 props 추가\n  onChange: (images: File[], mode: ImageUploadMode) => void;\n  onPanningOptionsChange: (options: { [key: number]: boolean }) => void; // 🎨 패닝 옵션 변경 핸들러\n}\n\n// ✅ ref를 통해 외부에서 접근 가능한 메서드 타입 정의\nexport interface TextImagePairManagerRef {\n  getEditedData: () => {\n    editedTexts: { [key: number]: string[] };\n    customPrompts: { [key: number]: CustomPrompt };\n    imagePanningOptions: { [key: number]: boolean };\n  };\n}\n\nconst TextImagePairManager = forwardRef<TextImagePairManagerRef, TextImagePairManagerProps>(({\n  content,\n  imageUploadMode,\n  images,\n  jobId,\n  imagePanningOptions, // 🎨 props에서 받기\n  onChange,\n  onPanningOptionsChange, // 🎨 props에서 받기\n}, ref) => {\n  const [generationStatus, setGenerationStatus] = useState<{ [key: string]: string }>({});\n  const [generationType, setGenerationType] = useState<{ [key: number]: 'ai' | 'bookmark' }>({});\n  const [uploadErrors, setUploadErrors] = useState<{ [key: number]: string }>({});\n  const [customPrompts, setCustomPrompts] = useState<{ [key: number]: CustomPrompt }>({});\n  const [promptsExpanded, setPromptsExpanded] = useState<{ [key: number]: boolean }>({});\n  const [bookmarkModalOpen, setBookmarkModalOpen] = useState<boolean>(false);\n  const [currentBookmarkIndex, setCurrentBookmarkIndex] = useState<number | null>(null);\n\n  // 🎨 이미지 개수가 변경될 때마다 패닝 옵션 초기화 (기본값: true)\n  useEffect(() => {\n    const imageCount = images.length;\n    if (imageCount === 0) return; // 이미지가 없으면 초기화 안 함\n\n    const newOptions: { [key: number]: boolean } = {};\n    let hasChanges = false;\n\n    for (let i = 0; i < imageCount; i++) {\n      // 기존 값이 있으면 유지, 없으면 true로 초기화\n      if (imagePanningOptions[i] !== undefined) {\n        newOptions[i] = imagePanningOptions[i];\n      } else {\n        newOptions[i] = true; // 기본값: 패닝 활성화\n        hasChanges = true;\n      }\n    }\n\n    // 변경사항이 있을 때만 업데이트\n    if (hasChanges) {\n      console.log(`🎨 패닝 옵션 초기화: ${imageCount}개 이미지에 대해 기본값 설정`, newOptions);\n      onPanningOptionsChange(newOptions);\n    }\n  }, [images.length, images]);\n\n  // ✅ Uncontrolled TextField를 위한 ref 저장소\n  const textFieldRefs = useRef<{ [key: string]: HTMLInputElement }>({});\n  const customPromptRefs = useRef<{ [key: number]: HTMLInputElement }>({});\n\n  // ✅ TextField의 현재 값 캐시 (재렌더링 시 값 복원용)\n  const textFieldValuesCache = useRef<{ [key: string]: string }>({});\n  const customPromptValuesCache = useRef<{ [key: number]: string }>({});\n\n  // 최신 images 상태를 추적하기 위한 ref\n  const imagesRef = useRef<File[]>(images);\n\n  // images prop이 변경될 때마다 ref 업데이트\n  useEffect(() => {\n    imagesRef.current = images;\n  }, [images]);\n\n  // ✅ ref를 통해 외부에서 데이터를 가져갈 수 있도록 메서드 제공\n  useImperativeHandle(ref, () => ({\n    getEditedData: () => {\n      // ✅ TextField ref에서 현재 값 읽기\n      const editedTexts: { [key: number]: string[] } = {};\n\n      Object.keys(textFieldRefs.current).forEach(key => {\n        // ✅ imageIndex-textIdx 형태만 처리 (예: \"0-0\", \"1-1\")\n        // stableRefKey 형태(예: \"body1-0\")는 건너뜀\n        const parts = key.split('-');\n        if (parts.length !== 2) return; // body1+body2 같은 경우 건너뜀\n\n        const imageIndex = parseInt(parts[0]);\n        const textIdx = parseInt(parts[1]);\n\n        // 숫자로 파싱 가능한 경우만 처리\n        if (isNaN(imageIndex) || isNaN(textIdx)) return;\n\n        const value = textFieldRefs.current[key]?.value || '';\n\n        if (!editedTexts[imageIndex]) {\n          editedTexts[imageIndex] = [];\n        }\n        editedTexts[imageIndex][textIdx] = value;\n      });\n\n      // ✅ customPrompt ref에서 현재 값 읽기\n      const customPromptsData: { [key: number]: CustomPrompt } = {};\n\n      Object.keys(customPromptRefs.current).forEach(indexStr => {\n        const imageIndex = parseInt(indexStr);\n        const promptValue = customPromptRefs.current[imageIndex]?.value || '';\n        const enabled = customPrompts[imageIndex]?.enabled || false;\n\n        if (promptValue || enabled) {\n          customPromptsData[imageIndex] = {\n            imageIndex,\n            prompt: promptValue,\n            enabled\n          };\n        }\n      });\n\n      return {\n        editedTexts,\n        customPrompts: customPromptsData,\n        imagePanningOptions: imagePanningOptions\n      };\n    }\n  }), [customPrompts, imagePanningOptions]); // customPrompts와 imagePanningOptions 의존\n\n  // ✅ 커스텀 프롬프트 토글 (enabled 상태만 관리)\n  const toggleCustomPrompt = (imageIndex: number, enabled: boolean) => {\n    setCustomPrompts(prev => ({\n      ...prev,\n      [imageIndex]: {\n        imageIndex,\n        prompt: prev[imageIndex]?.prompt || '',\n        enabled\n      }\n    }));\n  };\n\n  const togglePromptExpanded = (imageIndex: number) => {\n    setPromptsExpanded(prev => ({\n      ...prev,\n      [imageIndex]: !prev[imageIndex]\n    }));\n  };\n\n  // 🎨 패닝 옵션 토글 함수\n  const togglePanningOption = (imageIndex: number, enabled: boolean) => {\n    const newOptions = {\n      ...imagePanningOptions,\n      [imageIndex]: enabled\n    };\n    console.log(`🎨 패닝 옵션 변경 - imageIndex: ${imageIndex}, enabled: ${enabled}`);\n    console.log(`🎨 전체 패닝 옵션 상태:`, newOptions);\n    onPanningOptionsChange(newOptions); // 🎨 props 핸들러 호출\n  };\n\n  // 텍스트-이미지 쌍 데이터 생성 (useMemo로 최적화)\n  // ✅ editedTexts 의존성 제거 - TextField 입력 시 재계산 방지\n  const textImagePairs = useMemo((): (TextImagePair & { imageIndex: number })[] => {\n    const bodyTexts = Object.entries(content)\n      .filter(([key, value]) => key.startsWith('body') && value?.trim())\n      .map(([key, value], index) => ({ key, value: value.trim(), index }));\n\n    // 위치 정보를 가진 이미지들을 맵으로 생성\n    const imageMap = new Map<number, File>();\n    images.forEach(img => {\n      const storedIndex = (img as any).__imageIndex;\n      if (typeof storedIndex === 'number') {\n        imageMap.set(storedIndex, img);\n      }\n    });\n\n    console.log('🗺️ createTextImagePairs - imageMap:', Array.from(imageMap.entries()).map(([idx, file]) => `${idx}:${file.name}`));\n    console.log('📝 bodyTexts 길이:', bodyTexts.length, 'imageUploadMode:', imageUploadMode);\n    console.log('🔍 받은 images 배열:', images.map(img => `${img.name}(__imageIndex:${(img as any).__imageIndex})`));\n\n    const pairs: (TextImagePair & { imageIndex: number })[] = [];\n\n    if (imageUploadMode === 'per-script') {\n      // 텍스트 1개당 이미지 1개\n      bodyTexts.forEach(({ key, value, index }) => {\n        const foundImage = imageMap.get(index);\n        const customPrompt = customPrompts[index];\n\n        // 원본 텍스트 배열 (per-script는 1개)\n        const originalTexts = [value];\n\n        console.log(`📋 per-script: textIndex=${index}, imageIndex=${index}, foundImage=${foundImage?.name || 'null'}`);\n        pairs.push({\n          textIndex: index,\n          textKey: key,\n          textContent: value,\n          image: foundImage || null,\n          imageIndex: index,\n          isGenerating: false,\n          customPrompt: customPrompt?.prompt || '',\n          useCustomPrompt: customPrompt?.enabled || false,\n          originalTexts: originalTexts,\n        });\n      });\n    } else if (imageUploadMode === 'per-two-scripts') {\n      // 텍스트 2개당 이미지 1개\n      for (let i = 0; i < bodyTexts.length; i += 2) {\n        const imageIndex = Math.floor(i / 2);\n        const text1 = bodyTexts[i];\n        const text2 = bodyTexts[i + 1];\n\n        if (text1) {\n          const foundImage = imageMap.get(imageIndex);\n          const customPrompt = customPrompts[imageIndex];\n\n          // 원본 텍스트 배열\n          const originalTexts = [text1.value, text2?.value].filter(Boolean) as string[];\n\n          console.log(`📋 per-two-scripts: textIndex=${i}, imageIndex=${imageIndex}, foundImage=${foundImage?.name || 'null'}`);\n          pairs.push({\n            textIndex: i,\n            textKey: `${text1.key}${text2 ? `+${text2.key}` : ''}`,\n            textContent: `${text1.value}${text2 ? ` / ${text2.value}` : ''}`,\n            image: foundImage || null,\n            imageIndex: imageIndex,\n            isGenerating: false,\n            customPrompt: customPrompt?.prompt || '',\n            useCustomPrompt: customPrompt?.enabled || false,\n            originalTexts: originalTexts,\n          });\n        }\n      }\n    } else if (imageUploadMode === 'single-for-all') {\n      // 모든 텍스트에 이미지 1개\n      const allTexts = bodyTexts.map(({ key, value }) => key.replace('body', '대사')).join(' + ');\n      const allContent = bodyTexts.map(({ value }) => value).join(' / ');\n      const foundImage = imageMap.get(0);\n      const customPrompt = customPrompts[0];\n\n      // 원본 텍스트 배열 (모든 대사)\n      const originalTexts = bodyTexts.map(({ value }) => value);\n\n      console.log(`📋 single-for-all: 모든 대사, imageIndex=0, foundImage=${foundImage?.name || 'null'}`);\n      pairs.push({\n        textIndex: 0,\n        textKey: allTexts,\n        textContent: allContent,\n        image: foundImage || null,\n        imageIndex: 0,\n        isGenerating: false,\n        customPrompt: customPrompt?.prompt || '',\n        useCustomPrompt: customPrompt?.enabled || false,\n        originalTexts: originalTexts,\n      });\n    }\n\n    console.log('🎯 최종 pairs 개수:', pairs.length);\n    return pairs;\n  }, [content, images, imageUploadMode, customPrompts]);\n  \n  // 현재 images 배열 상태 로깅\n  console.log('📦 현재 images 배열 길이:', images.length);\n  console.log('📦 현재 images 배열:', images.length > 0 ? images.map(img => `${img.name}(index:${(img as any).__imageIndex})`) : '빈 배열');\n  console.log('🎮 generationStatus:', generationStatus);\n\n  // 개별 이미지 업로드 핸들러\n  const handleIndividualImageUpload = useCallback((imageIndex: number, acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 0) return;\n\n    const file = acceptedFiles[0];\n\n    // 기존 에러 상태 제거\n    setUploadErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[imageIndex];\n      return newErrors;\n    });\n\n    // 파일 유효성 검증 (모드에 따라 다른 제한)\n    const maxSize = imageUploadMode === 'single-for-all' ? 80 * 1024 * 1024 : 40 * 1024 * 1024;\n    const maxSizeText = imageUploadMode === 'single-for-all' ? '80MB' : '40MB';\n\n    if (file.size > maxSize) {\n      setUploadErrors(prev => ({ ...prev, [imageIndex]: `파일 크기가 ${maxSizeText}를 초과합니다` }));\n      return;\n    }\n\n    // 파일 형식 검증 (MIME 타입 + 확장자)\n    const fileName = file.name.toLowerCase();\n    const isImageByType = file.type.startsWith('image/');\n    const isVideoByType = file.type.startsWith('video/');\n\n    // HEIC/HEIF는 브라우저에서 MIME 타입이 없을 수 있으므로 확장자로 검증\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.heic', '.heif'];\n    const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.mkv'];\n\n    const isImageByExt = imageExtensions.some(ext => fileName.endsWith(ext));\n    const isVideoByExt = videoExtensions.some(ext => fileName.endsWith(ext));\n\n    const isImage = isImageByType || isImageByExt;\n    const isVideo = isVideoByType || isVideoByExt;\n\n    if (!isImage && !isVideo) {\n      setUploadErrors(prev => ({ ...prev, [imageIndex]: '이미지 또는 비디오 파일만 업로드 가능합니다' }));\n      return;\n    }\n\n    console.log('🔧 handleIndividualImageUpload - imageIndex:', imageIndex, 'fileName:', file.name);\n\n    // 파일에 위치 정보 추가\n    (file as any).__imageIndex = imageIndex;\n    console.log('🏷️ 파일에 __imageIndex 설정:', imageIndex);\n\n    // 최신 images 상태를 가져와서 업데이트\n    const currentImages = imagesRef.current;\n    console.log('🔄 업데이트 전 currentImages (ref):', currentImages.map(img => `${img.name}(index:${(img as any).__imageIndex})`));\n\n    // 현재 images에서 해당 imageIndex를 가진 파일 제거하고 새 파일 추가\n    const newImages = currentImages.filter(img => (img as any).__imageIndex !== imageIndex);\n    newImages.push(file);\n\n    // imageIndex 순으로 정렬\n    newImages.sort((a, b) => {\n      const indexA = (a as any).__imageIndex ?? 0;\n      const indexB = (b as any).__imageIndex ?? 0;\n      return indexA - indexB;\n    });\n\n    console.log('📊 업데이트된 images 배열:', newImages.map(img => `${img.name}(index:${(img as any).__imageIndex})`));\n\n    onChange(newImages, imageUploadMode);\n  }, [imageUploadMode, onChange]); // images 의존성 제거\n\n  // 개별 이미지 자동 생성\n  const handleIndividualGenerate = async (imageIndex: number, pair: TextImagePair & { imageIndex: number }, customPrompt?: string, useCustomPrompt?: boolean) => {\n    console.log('🤖 handleIndividualGenerate 시작 - imageIndex:', imageIndex, 'pair:', pair, 'customPrompt:', customPrompt, 'useCustomPrompt:', useCustomPrompt);\n    setGenerationStatus(prev => ({ ...prev, [imageIndex]: 'generating' }));\n    setGenerationType(prev => ({ ...prev, [imageIndex]: 'ai' }));\n\n    try {\n      // 요청 바디 구성\n      let requestBody: any = {\n        job_id: jobId  // Job ID 추가\n      };\n\n      // 🎯 우선순위 1: 커스텀 프롬프트\n      if (useCustomPrompt && customPrompt?.trim()) {\n        requestBody.custom_prompt = customPrompt.trim();\n        console.log('📝 [우선순위 1] 커스텀 프롬프트 사용:', customPrompt.trim());\n      }\n      // 🎯 우선순위 2: 수정된 텍스트 (TextField ref에서 읽기)\n      else {\n        // ✅ TextField ref에서 현재 입력된 값 읽기\n        const editedText0 = textFieldRefs.current[`${imageIndex}-0`]?.value || '';\n        const editedText1 = textFieldRefs.current[`${imageIndex}-1`]?.value || '';\n\n        // originalTexts 가져오기\n        const originalTexts = pair.originalTexts || [];\n\n        // 수정된 텍스트가 있는지 확인\n        const hasEditedText0 = editedText0 && editedText0 !== originalTexts[0];\n        const hasEditedText1 = editedText1 && editedText1 !== originalTexts[1];\n\n        if (hasEditedText0 || hasEditedText1) {\n          // 수정된 텍스트 사용\n          requestBody.text = editedText0 || originalTexts[0];\n          if (editedText1 || originalTexts[1]) {\n            requestBody.additional_context = editedText1 || originalTexts[1];\n          }\n          console.log('📝 [우선순위 2] 수정된 텍스트 사용 (ref에서 읽음):', requestBody.text);\n        } else {\n          // 원본 텍스트 사용\n          const texts = pair.textContent.split(' / ');\n          requestBody.text = texts[0];\n          if (texts.length > 1) {\n            requestBody.additional_context = texts[1];\n          }\n          console.log('📝 [우선순위 3] 원본 텍스트 사용:', texts[0]);\n        }\n      }\n\n      console.log('🚀 요청 바디 (Job ID 포함):', requestBody);\n\n      const response = await fetch('/generate-single-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '이미지 생성에 실패했습니다');\n      }\n\n      const data = await response.json();\n      const imageUrl = data.image_url;\n\n      // 생성된 이미지를 다운로드하고 File 객체로 변환\n      const imageResponse = await fetch(imageUrl);\n      if (!imageResponse.ok) {\n        throw new Error('생성된 이미지 다운로드에 실패했습니다');\n      }\n\n      const blob = await imageResponse.blob();\n      const fileName = `generated_image_pair_${imageIndex}.png`;\n      const file = new File([blob], fileName, { type: 'image/png' });\n\n      console.log('📸 이미지 생성 완료 - fileName:', fileName, '호출할 imageIndex:', imageIndex);\n\n      // 이미지 배열 업데이트\n      handleIndividualImageUpload(imageIndex, [file]);\n      \n      setGenerationStatus(prev => ({ ...prev, [imageIndex]: 'success' }));\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = { ...prev };\n          delete newStatus[imageIndex];\n          return newStatus;\n        });\n      }, 3000);\n\n    } catch (error) {\n      console.error('개별 이미지 생성 오류:', error);\n      setGenerationStatus(prev => ({ ...prev, [imageIndex]: 'error' }));\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = { ...prev };\n          delete newStatus[imageIndex];\n          return newStatus;\n        });\n      }, 5000);\n    }\n  };\n\n  // 개별 이미지 삭제 (개선됨)\n  const handleRemoveImage = (imageIndex: number) => {\n    console.log('🗑️ 이미지 삭제 요청 - imageIndex:', imageIndex);\n\n    // 최신 images 상태를 가져와서 삭제\n    const currentImages = imagesRef.current;\n    const newImages = currentImages.filter(img => (img as any).__imageIndex !== imageIndex);\n    \n    // 해당 인덱스의 에러 상태도 함께 제거\n    setUploadErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[imageIndex];\n      return newErrors;\n    });\n    \n    // 생성 상태도 함께 제거\n    setGenerationStatus(prev => {\n      const newStatus = { ...prev };\n      delete newStatus[imageIndex];\n      return newStatus;\n    });\n    \n    console.log('✅ 이미지 삭제 완료 - imageIndex:', imageIndex);\n    console.log('📊 남은 이미지:', newImages.map(img => `${img.name}(index:${(img as any).__imageIndex})`));\n    \n    onChange(newImages, imageUploadMode);\n  };\n\n  // 개별 이미지 다운로드\n  const handleDownloadImage = async (imageIndex: number, image: File) => {\n    try {\n      // 생성된 이미지인지 확인 (filename으로 판단)\n      if (image.name.startsWith('generated_')) {\n        // 백엔드 다운로드 API를 통해 다운로드\n        const link = document.createElement('a');\n        link.href = `/download-image/${image.name}`;\n        link.download = `reels_image_${imageIndex + 1}.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      } else {\n        // 업로드된 파일은 직접 다운로드\n        const url = URL.createObjectURL(image);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `reels_image_${imageIndex + 1}_${image.name}`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }\n      console.log('💾 이미지 다운로드 완료 - imageIndex:', imageIndex, 'fileName:', image.name);\n    } catch (error) {\n      console.error('이미지 다운로드 오류:', error);\n    }\n  };\n\n  // 북마크 모달 열기\n  const handleOpenBookmarkModal = (imageIndex: number) => {\n    console.log('🎬 북마크 모달 열기 - imageIndex:', imageIndex);\n    setCurrentBookmarkIndex(imageIndex);\n    setBookmarkModalOpen(true);\n  };\n\n  // 북마크 모달 닫기\n  const handleCloseBookmarkModal = () => {\n    setBookmarkModalOpen(false);\n    setCurrentBookmarkIndex(null);\n  };\n\n  // 북마크 미디어(비디오/이미지) 선택 핸들러\n  const handleSelectBookmarkMedia = async (media: BookmarkVideo | BookmarkImage, mediaType: 'video' | 'image') => {\n    if (currentBookmarkIndex === null) return;\n\n    console.log(`✅ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 선택:`, media.filename, 'imageIndex:', currentBookmarkIndex);\n\n    try {\n      // 생성 상태 업데이트\n      setGenerationStatus(prev => ({ ...prev, [currentBookmarkIndex]: 'generating' }));\n      setGenerationType(prev => ({ ...prev, [currentBookmarkIndex]: 'bookmark' }));\n\n      // 백엔드 API 호출: 북마크 미디어를 Job 폴더로 복사\n      const response = mediaType === 'video'\n        ? await apiService.copyBookmarkVideo(jobId, media.filename, currentBookmarkIndex)\n        : await apiService.copyBookmarkImage(jobId, media.filename, currentBookmarkIndex);\n\n      if (response.status === 'success') {\n        // 복사된 파일을 File 객체로 변환하여 이미지 배열에 추가\n        const fileUrl = response.data.file_url;\n        const filename = response.data.filename;\n\n        // 파일을 Fetch로 가져와서 File 객체 생성\n        const fileResponse = await fetch(fileUrl);\n        if (!fileResponse.ok) {\n          throw new Error(`${mediaType === 'video' ? '비디오' : '이미지'} 파일 다운로드에 실패했습니다`);\n        }\n\n        const blob = await fileResponse.blob();\n\n        // 파일 타입 결정\n        const ext = filename.split('.').pop()?.toLowerCase();\n        let mimeType = 'application/octet-stream';\n\n        if (mediaType === 'video') {\n          if (ext === 'mp4') mimeType = 'video/mp4';\n          else if (ext === 'mov') mimeType = 'video/quicktime';\n          else if (ext === 'avi') mimeType = 'video/x-msvideo';\n          else if (ext === 'webm') mimeType = 'video/webm';\n        } else {\n          if (ext === 'jpg' || ext === 'jpeg') mimeType = 'image/jpeg';\n          else if (ext === 'png') mimeType = 'image/png';\n          else if (ext === 'webp') mimeType = 'image/webp';\n          else if (ext === 'gif') mimeType = 'image/gif';\n        }\n\n        const file = new File([blob], filename, { type: mimeType });\n\n        console.log(`📸 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 파일 생성 완료 - fileName:`, filename, 'imageIndex:', currentBookmarkIndex);\n\n        // 이미지 배열 업데이트\n        handleIndividualImageUpload(currentBookmarkIndex, [file]);\n\n        setGenerationStatus(prev => ({ ...prev, [currentBookmarkIndex]: 'success' }));\n        setTimeout(() => {\n          setGenerationStatus(prev => {\n            const newStatus = { ...prev };\n            delete newStatus[currentBookmarkIndex];\n            return newStatus;\n          });\n        }, 3000);\n\n        console.log(`✅ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 복사 및 업로드 완료`);\n      }\n    } catch (error: any) {\n      console.error(`❌ 북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 선택 오류:`, error);\n      setGenerationStatus(prev => ({ ...prev, [currentBookmarkIndex]: 'error' }));\n      setUploadErrors(prev => ({ ...prev, [currentBookmarkIndex]: error.message || `북마크 ${mediaType === 'video' ? '비디오' : '이미지'} 불러오기 실패` }));\n\n      setTimeout(() => {\n        setGenerationStatus(prev => {\n          const newStatus = { ...prev };\n          delete newStatus[currentBookmarkIndex];\n          return newStatus;\n        });\n      }, 5000);\n    }\n  };\n\n  // 비디오 미리보기 컴포넌트 (브라우저 직접 재생)\n  const VideoPreview: React.FC<{ file: File }> = memo(({ file }) => {\n    const [videoUrl, setVideoUrl] = useState<string | null>(null);\n\n    useEffect(() => {\n      // 브라우저에서 직접 재생할 수 있도록 URL 생성\n      const url = URL.createObjectURL(file);\n      setVideoUrl(url);\n\n      return () => {\n        if (url) {\n          URL.revokeObjectURL(url);\n        }\n      };\n    }, [file]);\n\n    return (\n      <Box sx={{ position: 'relative' }}>\n        {videoUrl && (\n          <video\n            src={videoUrl}\n            style={{\n              width: '100%',\n              aspectRatio: '1/1',\n              objectFit: 'cover',\n              borderRadius: '8px'\n            }}\n            autoPlay\n            muted\n            loop\n            playsInline\n            controls={false}\n            onError={(e) => {\n              console.error('비디오 재생 오류:', e);\n            }}\n          />\n        )}\n\n        {/* 비디오 아이콘 오버레이 */}\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 8,\n            left: 8,\n            bgcolor: 'rgba(0,0,0,0.7)',\n            borderRadius: 1,\n            p: 0.5,\n            display: 'flex',\n            alignItems: 'center'\n          }}\n        >\n          <MovieIcon sx={{ fontSize: 16, color: 'white' }} />\n          <Typography variant=\"caption\" color=\"white\" sx={{ ml: 0.5 }}>\n            영상\n          </Typography>\n        </Box>\n      </Box>\n    );\n  });\n\n  // 개별 드래그앤드롭 컴포넌트 (React.memo로 최적화)\n  const IndividualDropZone: React.FC<{\n    imageIndex: number;\n    pair: TextImagePair & { imageIndex: number };\n  }> = memo(({ imageIndex, pair }) => {\n    const onDrop = useCallback((acceptedFiles: File[]) => {\n      handleIndividualImageUpload(imageIndex, acceptedFiles);\n    }, [imageIndex]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n      onDrop,\n      accept: {\n        'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp', '.heic', '.heif'],\n        'video/*': ['.mp4', '.mov', '.avi', '.webm', '.mkv']\n      },\n      maxFiles: 1,\n      multiple: false\n    });\n\n    const isGenerating = generationStatus[imageIndex] === 'generating';\n    const generationError = generationStatus[imageIndex] === 'error';\n    const generationSuccess = generationStatus[imageIndex] === 'success';\n    const currentGenerationType = generationType[imageIndex];\n    const uploadError = uploadErrors[imageIndex];\n    const isPromptExpanded = promptsExpanded[imageIndex] || false;\n    const currentCustomPrompt = customPrompts[imageIndex];\n\n    // 🎨 패닝 옵션 상태 (기본값: true)\n    const currentPanningOption = imagePanningOptions[imageIndex] !== undefined\n      ? imagePanningOptions[imageIndex]\n      : true;\n\n    // ✅ 심플한 커스텀 프롬프트 핸들러 (복잡한 로컬 상태/디바운스 제거)\n\n    return (\n      <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        <CardContent sx={{ flex: 1 }}>\n          {/* 텍스트 표시 */}\n          <Typography variant=\"h6\" gutterBottom sx={{\n            fontSize: '0.9rem',\n            fontWeight: 600,\n            color: 'primary.main',\n            mb: 2\n          }}>\n            {pair.textKey.replace('body', '대사 ').replace('+body', ' + 대사 ')}\n          </Typography>\n\n          {/* 모든 모드: 개별 텍스트박스 */}\n          {pair.originalTexts ? (\n            <Box sx={{ mb: 2 }}>\n              {pair.originalTexts.map((originalText, idx) => {\n                // ✅ 안정적인 고유 키: textKey 사용 (imageIndex는 순서 변경 시 바뀜)\n                const stableRefKey = `${pair.textKey}-${idx}`;\n                const stableKey = `text-${pair.textKey}-${idx}`;\n\n                // ✅ 캐시된 값이 있으면 사용, 없으면 원본 사용\n                const initialValue = textFieldValuesCache.current[stableRefKey] || originalText;\n\n                return (\n                  <TextField\n                    key={stableKey}\n                    fullWidth\n                    multiline\n                    minRows={2}\n                    maxRows={8}\n                    defaultValue={initialValue}\n                    inputRef={(el) => {\n                      if (el) {\n                        textFieldRefs.current[stableRefKey] = el;\n                        // ✅ imageIndex 기반 ref도 유지 (AI 생성 시 사용)\n                        textFieldRefs.current[`${imageIndex}-${idx}`] = el;\n                      }\n                    }}\n                    onChange={(e) => {\n                      // ✅ 값이 변경될 때마다 캐시에 저장\n                      textFieldValuesCache.current[stableRefKey] = e.target.value;\n                    }}\n                    label={imageUploadMode === 'per-two-scripts' ? `대사 ${pair.textIndex + idx + 1}` :\n                           imageUploadMode === 'per-script' ? `대사 ${pair.textIndex + 1}` :\n                           `대사 ${idx + 1}`}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    sx={{ mb: 1 }}\n                    helperText={idx === 0 ? \"수정된 텍스트는 영상 생성 시 사용됩니다\" : \"\"}\n                  />\n                );\n              })}\n            </Box>\n          ) : (\n            <Typography variant=\"body2\" sx={{\n              mb: 2,\n              p: 1.5,\n              bgcolor: 'grey.50',\n              borderRadius: 1,\n              border: '1px solid',\n              borderColor: 'grey.200',\n              fontSize: '0.8rem',\n              lineHeight: 1.4\n            }}>\n              {pair.textContent}\n            </Typography>\n          )}\n\n          {/* 커스텀 프롬프트 섹션 */}\n          <Box sx={{ mb: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600 }}>\n                AI 생성 옵션\n              </Typography>\n              <IconButton\n                size=\"small\"\n                onClick={() => togglePromptExpanded(imageIndex)}\n                sx={{ p: 0.5 }}\n              >\n                {isPromptExpanded ? <ExpandLess fontSize=\"small\" /> : <ExpandMore fontSize=\"small\" />}\n              </IconButton>\n            </Box>\n\n            <Collapse in={isPromptExpanded}>\n              <Box sx={{ bgcolor: 'rgba(25, 118, 210, 0.04)', p: 1.5, borderRadius: 1, border: '1px solid rgba(25, 118, 210, 0.12)' }}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={currentCustomPrompt?.enabled || false}\n                      onChange={(e) => {\n                        toggleCustomPrompt(imageIndex, e.target.checked);\n                      }}\n                      size=\"small\"\n                    />\n                  }\n                  label={\n                    <Typography variant=\"caption\" sx={{ fontWeight: 500 }}>\n                      커스텀 프롬프트 사용\n                    </Typography>\n                  }\n                  sx={{ mb: 1, ml: 0 }}\n                />\n\n                <TextField\n                  key={`prompt-${imageIndex}`}\n                  fullWidth\n                  multiline\n                  rows={2}\n                  size=\"small\"\n                  placeholder=\"이미지 생성을 위한 커스텀 프롬프트를 입력하세요...\"\n                  defaultValue={customPromptValuesCache.current[imageIndex] || currentCustomPrompt?.prompt || ''}\n                  inputRef={(el) => {\n                    if (el) customPromptRefs.current[imageIndex] = el;\n                  }}\n                  onChange={(e) => {\n                    // ✅ 값이 변경될 때마다 캐시에 저장\n                    customPromptValuesCache.current[imageIndex] = e.target.value;\n                  }}\n                  variant=\"outlined\"\n                  sx={{\n                    display: currentCustomPrompt?.enabled ? 'block' : 'none',\n                    '& .MuiOutlinedInput-root': {\n                      fontSize: '0.75rem',\n                      bgcolor: 'white'\n                    }\n                  }}\n                  helperText=\"실제 영상에서는 기존 대사가 사용되며, 이 프롬프트는 이미지 생성에만 사용됩니다.\"\n                  autoComplete=\"off\"\n                  spellCheck=\"false\"\n                />\n\n                {!currentCustomPrompt?.enabled && (\n                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n                    기본 모드: 위의 대사 내용을 기반으로 이미지를 생성합니다.\n                  </Typography>\n                )}\n              </Box>\n            </Collapse>\n          </Box>\n\n          {/* 이미지/비디오 표시 또는 드래그앤드롭 영역 */}\n          {pair.image ? (\n            <Box sx={{ position: 'relative', mb: 2 }}>\n              {(() => {\n                // 비디오 파일 확인 (MIME 타입 + 확장자)\n                const fileName = pair.image.name.toLowerCase();\n                const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.mkv'];\n                const isVideo = pair.image.type.startsWith('video/') || videoExtensions.some(ext => fileName.endsWith(ext));\n\n                // HEIC 파일 확인\n                const heicExtensions = ['.heic', '.heif'];\n                const isHEIC = heicExtensions.some(ext => fileName.endsWith(ext));\n\n                if (isVideo) {\n                  return <VideoPreview file={pair.image} />;\n                } else if (isHEIC) {\n                  // HEIC 파일은 브라우저에서 미리보기 불가 → 파일명 표시\n                  return (\n                    <Box\n                      sx={{\n                        width: '100%',\n                        aspectRatio: '1/1',\n                        backgroundColor: '#f5f5f5',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexDirection: 'column',\n                        borderRadius: 1,\n                        border: '2px dashed #ccc'\n                      }}\n                    >\n                      <Typography variant=\"h6\" color=\"text.secondary\">📷</Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, px: 2, textAlign: 'center' }}>\n                        {pair.image.name}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        (HEIC 파일 - 미리보기 불가)\n                      </Typography>\n                    </Box>\n                  );\n                } else {\n                  // 일반 이미지\n                  return (\n                    <Box\n                      sx={{\n                        width: '100%',\n                        aspectRatio: '1/1',\n                        backgroundImage: `url(${URL.createObjectURL(pair.image)})`,\n                        backgroundSize: 'cover',\n                        backgroundPosition: 'center',\n                        borderRadius: 1\n                      }}\n                    />\n                  );\n                }\n              })()}\n              \n              {/* 이미지 컨트롤 버튼들 */}\n              <Box sx={{ \n                position: 'absolute', \n                top: 8, \n                right: 8,\n                display: 'flex',\n                gap: 0.5\n              }}>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleDownloadImage(imageIndex, pair.image!)}\n                  sx={{\n                    bgcolor: 'rgba(255,255,255,0.9)',\n                    '&:hover': { bgcolor: 'rgba(255,255,255,1)' }\n                  }}\n                  title=\"이미지 다운로드\"\n                >\n                  <Download color=\"success\" fontSize=\"small\" />\n                </IconButton>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleRemoveImage(imageIndex)}\n                  sx={{\n                    bgcolor: 'rgba(255,255,255,0.9)',\n                    '&:hover': { bgcolor: 'rgba(255,255,255,1)' }\n                  }}\n                  title=\"이미지 삭제\"\n                >\n                  <Delete color=\"error\" fontSize=\"small\" />\n                </IconButton>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => {\n                    // ✅ ref에서 현재 프롬프트 값 읽기\n                    const currentPromptValue = customPromptRefs.current[imageIndex]?.value || '';\n                    const isEnabled = currentCustomPrompt?.enabled || false;\n\n                    console.log('🔄 새로고침 버튼 클릭됨 - imageIndex:', imageIndex, 'pair:', pair);\n                    console.log('📝 커스텀 프롬프트 값 (ref에서 읽음):', currentPromptValue);\n\n                    handleIndividualGenerate(\n                      imageIndex,\n                      pair,\n                      currentPromptValue,\n                      isEnabled\n                    );\n                  }}\n                  disabled={isGenerating}\n                  sx={{\n                    bgcolor: 'rgba(255,255,255,0.9)',\n                    '&:hover': { bgcolor: 'rgba(255,255,255,1)' }\n                  }}\n                  title=\"이미지 재생성\"\n                >\n                  {isGenerating ? (\n                    <CircularProgress size={16} />\n                  ) : (\n                    <Refresh color=\"primary\" fontSize=\"small\" />\n                  )}\n                </IconButton>\n              </Box>\n\n              <Typography variant=\"caption\" sx={{\n                position: 'absolute',\n                bottom: 4,\n                left: 8,\n                bgcolor: 'rgba(0,0,0,0.7)',\n                color: 'white',\n                px: 1,\n                py: 0.5,\n                borderRadius: 1\n              }}>\n                {pair.image.name}\n              </Typography>\n\n              {/* 🎨 패닝 옵션 섹션 (이미지가 있을 때만 표시, 비디오 제외) */}\n              {!pair.image.type.startsWith('video/') && (\n                <Box sx={{\n                  mt: 2,\n                  p: 1.5,\n                  bgcolor: 'rgba(76, 175, 80, 0.04)',\n                  borderRadius: 1,\n                  border: '1px solid rgba(76, 175, 80, 0.2)'\n                }}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={currentPanningOption}\n                        onChange={(e) => togglePanningOption(imageIndex, e.target.checked)}\n                        size=\"small\"\n                        color=\"success\"\n                      />\n                    }\n                    label={\n                      <Box>\n                        <Typography variant=\"caption\" sx={{ fontWeight: 600, display: 'block' }}>\n                          🎬 패닝 효과\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontSize: '0.7rem' }}>\n                          {currentPanningOption\n                            ? '이미지가 좌우/상하로 부드럽게 움직입니다'\n                            : '이미지가 고정되어 움직이지 않습니다'}\n                        </Typography>\n                      </Box>\n                    }\n                    sx={{ ml: 0, width: '100%' }}\n                  />\n                </Box>\n              )}\n            </Box>\n          ) : (\n            <Box\n              {...getRootProps()}\n              sx={{\n                border: 2,\n                borderColor: isDragActive ? 'primary.main' : 'grey.300',\n                borderStyle: 'dashed',\n                borderRadius: 1,\n                p: 2,\n                textAlign: 'center',\n                cursor: 'pointer',\n                bgcolor: isDragActive ? 'action.hover' : 'background.paper',\n                mb: 2,\n                aspectRatio: '1/1',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                '&:hover': {\n                  borderColor: 'primary.main',\n                  bgcolor: 'action.hover'\n                }\n              }}\n            >\n              <input {...getInputProps()} />\n              <Box sx={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n                <CloudUpload sx={{ fontSize: 32, color: 'grey.400', mb: 1 }} />\n              </Box>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {isDragActive ? '파일을 놓으세요' : '미디어 드래그 또는 클릭'}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mt: 0.5, fontSize: '0.7rem' }}>\n                최대 {imageUploadMode === 'single-for-all' ? '40MB' : '10MB'}\n              </Typography>\n            </Box>\n          )}\n\n          {/* 상태 메시지 */}\n          {isGenerating && (\n            <Alert severity=\"info\" sx={{ mt: 1 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <CircularProgress size={16} sx={{ mr: 1 }} />\n                {currentGenerationType === 'bookmark' ? '미디어 불러오는 중...' : '이미지 생성 중...'}\n              </Box>\n            </Alert>\n          )}\n\n          {generationSuccess && (\n            <Alert severity=\"success\" sx={{ mt: 1 }}>\n              {currentGenerationType === 'bookmark' ? '미디어 불러오기 완료!' : '이미지 생성 완료!'}\n            </Alert>\n          )}\n\n          {generationError && (\n            <Alert severity=\"error\" sx={{ mt: 1 }}>\n              {currentGenerationType === 'bookmark' ? '미디어 불러오기 실패. 다시 시도해주세요.' : '이미지 생성 실패. 다시 시도해주세요.'}\n            </Alert>\n          )}\n          \n          {uploadError && (\n            <Alert severity=\"error\" sx={{ mt: 1 }}>\n              {uploadError}\n            </Alert>\n          )}\n        </CardContent>\n\n        {/* 하단 액션 버튼 */}\n        <Box sx={{ p: 1.5, pt: 0, display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            startIcon={<AutoFixHigh />}\n            onClick={() => {\n              // ✅ ref에서 현재 프롬프트 값 읽기\n              const currentPromptValue = customPromptRefs.current[imageIndex]?.value || '';\n              const isEnabled = currentCustomPrompt?.enabled || false;\n\n              console.log('🖱️ 자동생성 버튼 클릭됨 - imageIndex:', imageIndex, 'pair:', pair);\n              console.log('📝 커스텀 프롬프트 값 (ref에서 읽음):', currentPromptValue);\n              console.log('✅ 커스텀 프롬프트 enabled:', isEnabled);\n\n              handleIndividualGenerate(\n                imageIndex,\n                pair,\n                currentPromptValue,\n                isEnabled\n              );\n            }}\n            disabled={isGenerating}\n            sx={{\n              bgcolor: currentCustomPrompt?.enabled ? 'rgba(25, 118, 210, 0.08)' : 'transparent',\n              borderColor: currentCustomPrompt?.enabled ? 'primary.main' : 'grey.300',\n              color: currentCustomPrompt?.enabled ? 'primary.main' : 'text.primary',\n              '&:hover': {\n                bgcolor: currentCustomPrompt?.enabled ? 'rgba(25, 118, 210, 0.12)' : 'action.hover',\n              }\n            }}\n          >\n            {isGenerating ? '생성중...' : (currentCustomPrompt?.enabled ? '커스텀 프롬프트로 생성' : 'AI 자동생성')}\n          </Button>\n\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            startIcon={<VideoLibrary />}\n            onClick={() => handleOpenBookmarkModal(imageIndex)}\n            disabled={isGenerating}\n            sx={{\n              borderColor: 'secondary.main',\n              color: 'secondary.main',\n              '&:hover': {\n                bgcolor: 'rgba(156, 39, 176, 0.08)',\n                borderColor: 'secondary.main',\n              }\n            }}\n          >\n            미디어 불러오기\n          </Button>\n        </Box>\n      </Card>\n    );\n  });\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\n        텍스트-이미지 매칭 관리\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        각 텍스트에 대응되는 이미지를 개별적으로 관리할 수 있습니다.\n        드래그앤드롭으로 이미지를 업로드하거나 AI로 자동 생성하세요.\n        <br />\n        <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\">\n          파일 크기 제한: {imageUploadMode === 'single-for-all' ? '최대 40MB' : '각 파일 최대 10MB'}\n        </Typography>\n      </Typography>\n\n      <Grid container spacing={2}>\n        {textImagePairs.map((pair, index) => (\n          <Grid item xs={12} sm={6} md={4} key={`dropzone-${pair.imageIndex}-${pair.textKey}`}>\n            <IndividualDropZone imageIndex={pair.imageIndex} pair={pair} />\n          </Grid>\n        ))}\n      </Grid>\n\n      {textImagePairs.length === 0 && (\n        <Alert severity=\"info\" sx={{ mt: 2 }}>\n          대본을 먼저 작성해주세요.\n        </Alert>\n      )}\n\n      {/* 북마크 미디어 선택 모달 */}\n      <MediaBookmarkModal\n        open={bookmarkModalOpen}\n        onClose={handleCloseBookmarkModal}\n        onSelect={handleSelectBookmarkMedia}\n      />\n    </Box>\n  );\n});\n\n// Display name for debugging\nTextImagePairManager.displayName = 'TextImagePairManager';\n\nexport default TextImagePairManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}