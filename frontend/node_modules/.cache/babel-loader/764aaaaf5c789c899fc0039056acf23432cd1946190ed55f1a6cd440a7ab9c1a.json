{"ast":null,"code":"'use client';\n\n// do not remove the following import (https://github.com/microsoft/TypeScript/issues/29808#issuecomment-1320713018)\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// @ts-ignore\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\nimport excludeVariablesFromRoot from './excludeVariablesFromRoot';\nimport THEME_ID from './identifier';\nimport { defaultConfig } from '../InitColorSchemeScript/InitColorSchemeScript';\nconst defaultTheme = experimental_extendTheme();\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: getInitColorSchemeScriptSystem\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  theme: defaultTheme,\n  attribute: defaultConfig.attribute,\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  },\n  excludeVariablesFromRoot\n});\n\n/**\n * @deprecated Use `InitColorSchemeScript` instead\n * ```diff\n * - import { getInitColorSchemeScript } from '@mui/material/styles';\n * + import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\n *\n * - getInitColorSchemeScript();\n * + <InitColorSchemeScript />;\n * ```\n */\nexport const getInitColorSchemeScript = getInitColorSchemeScriptSystem;\nexport { useColorScheme, CssVarsProvider as Experimental_CssVarsProvider };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}