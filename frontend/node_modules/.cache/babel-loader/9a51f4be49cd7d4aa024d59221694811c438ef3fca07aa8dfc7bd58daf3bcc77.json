{"ast":null,"code":"import axios from 'axios';\n// API 베이스 URL 설정\nconst API_BASE_URL = '/api';\n\n// Axios 인스턴스 생성\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 400000,\n  // 약 6.7분 (영상 생성 시간 고려)\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - 인증 토큰 추가\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 에러 처리\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 인증 오류시 로그아웃 처리\n    localStorage.removeItem('authToken');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // 서버 상태 확인\n  async checkHealth() {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n  // BGM 목록 조회\n  async getBgmList() {\n    try {\n      const response = await apiClient.get('/bgm-list');\n      if (response.data.status === 'success') {\n        const bgmData = response.data.data;\n        return Object.values(bgmData);\n      } else {\n        throw new Error(response.data.message || 'BGM 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error('BGM 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 특정 성격의 BGM 파일 목록 조회\n  async getBgmFiles(mood) {\n    try {\n      const response = await apiClient.get(`/bgm/${mood}`);\n      if (response.data.status === 'success') {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'BGM 파일 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error(`BGM 파일 목록 조회 실패 (${mood}):`, error);\n      throw error;\n    }\n  },\n  // 영상 생성\n  async generateVideo(data) {\n    const formData = new FormData();\n\n    // JSON 데이터 추가\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script' ? '1_per_image' : data.imageUploadMode === 'per-two-scripts' ? '2_per_image' : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 추가\n    formData.append('text_position', data.textPosition);\n\n    // 텍스트 스타일 추가\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 크로스 디졸브 설정 추가\n    formData.append('cross_dissolve', data.crossDissolve);\n\n    // 자막 지속 시간 추가\n    if (data.subtitleDuration !== undefined) {\n      formData.append('subtitle_duration', String(data.subtitleDuration));\n    }\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      // 이미지 파일을 FormData로 직접 첨부\n      data.images.forEach(image => {\n        // __imageIndex 속성을 사용하여 올바른 번호로 업로드\n        const imageIndex = image.__imageIndex;\n        if (typeof imageIndex === 'number') {\n          const fileNumber = imageIndex + 1; // 0-based → 1-based\n          const fileExtension = image.name.split('.').pop();\n          formData.append(`image_${fileNumber}`, image, `${fileNumber}.${fileExtension}`);\n          console.log(`📤 업로드: image_${fileNumber} → ${fileNumber}.${fileExtension} (imageIndex: ${imageIndex})`);\n        } else {\n          console.warn(`⚠️ 이미지에 __imageIndex가 없습니다:`, image.name);\n        }\n      });\n      // image_urls는 빈 배열로 전송 (파일 업로드 방식 사용)\n      formData.append('image_urls', '[]');\n    } else {\n      formData.append('image_urls', '[]');\n    }\n    try {\n      const response = await apiClient.post('/generate-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('영상 생성 실패:', error);\n      throw error;\n    }\n  },\n  // 영상 파일 다운로드 URL 생성\n  getVideoDownloadUrl(videoPath) {\n    // video_path에서 파일명 추출\n    const filename = videoPath.split('/').pop();\n    return `/videos/${filename}`;\n  },\n  // BGM 파일 URL 생성 (미리듣기용)\n  getBgmUrl(mood, filename) {\n    return `/bgm/${mood}/${encodeURIComponent(filename)}`;\n  },\n  // 배치 작업 관련 API 메서드들\n\n  // 비동기 영상 생성 요청\n  async generateVideoAsync(data) {\n    const formData = new FormData();\n\n    // 필수 데이터 추가\n    formData.append('user_email', data.userEmail);\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 수정된 텍스트 추가\n    if (data.editedTexts) {\n      formData.append('edited_texts', data.editedTexts);\n    }\n\n    // 🎨 이미지별 패닝 옵션 추가\n    if (data.imagePanningOptions) {\n      formData.append('image_panning_options', data.imagePanningOptions);\n      console.log('🎨 apiService - 패닝 옵션 전달:', data.imagePanningOptions);\n    }\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script' ? '1_per_image' : data.imageUploadMode === 'per-two-scripts' ? '2_per_image' : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 및 스타일 추가\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 크로스 디졸브 설정 추가\n    formData.append('cross_dissolve', data.crossDissolve);\n\n    // 자막 지속 시간 추가\n    if (data.subtitleDuration !== undefined) {\n      formData.append('subtitle_duration', String(data.subtitleDuration));\n    }\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // Job ID 추가\n    if (data.jobId) {\n      formData.append('job_id', data.jobId);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      data.images.forEach(image => {\n        // __imageIndex 속성을 사용하여 올바른 번호로 업로드\n        const imageIndex = image.__imageIndex;\n        if (typeof imageIndex === 'number') {\n          const fileNumber = imageIndex + 1; // 0-based → 1-based\n          const fileExtension = image.name.split('.').pop();\n          formData.append(`image_${fileNumber}`, image, `${fileNumber}.${fileExtension}`);\n          console.log(`📤 비동기 업로드: image_${fileNumber} → ${fileNumber}.${fileExtension} (imageIndex: ${imageIndex})`);\n        } else {\n          console.warn(`⚠️ 비동기: 이미지에 __imageIndex가 없습니다:`, image.name);\n        }\n      });\n    }\n    try {\n      const response = await apiClient.post('/generate-video-async', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('비동기 영상 생성 요청 실패:', error);\n      throw error;\n    }\n  },\n  // 작업 상태 조회\n  async getJobStatus(jobId) {\n    try {\n      const response = await apiClient.get(`/job-status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('작업 상태 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 큐 통계 조회 (관리용)\n  async getQueueStats() {\n    try {\n      const response = await apiClient.get('/queue-stats');\n      return response.data;\n    } catch (error) {\n      console.error('큐 통계 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 보안 다운로드 링크 생성\n  getSecureDownloadUrl(token) {\n    return `/api/download-video?token=${encodeURIComponent(token)}`;\n  },\n  // 미리보기 생성\n  async generatePreview(data) {\n    const formData = new FormData();\n    formData.append('title', data.title);\n    formData.append('body1', data.body1);\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n    formData.append('title_area_mode', data.titleAreaMode);\n    formData.append('title_font', data.titleFont);\n    formData.append('body_font', data.bodyFont);\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n    if (data.jobId) {\n      formData.append('job_id', data.jobId); // Job ID 추가\n    }\n    if (data.imagePanningOptions) {\n      formData.append('image_panning_options', JSON.stringify(data.imagePanningOptions));\n    }\n    if (data.image) {\n      formData.append('image_1', data.image);\n    }\n    try {\n      const response = await apiClient.post('/preview-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('미리보기 생성 실패:', error);\n      throw error;\n    }\n  },\n  // Job 폴더 생성\n  async createJobFolder(jobId) {\n    try {\n      const response = await apiClient.post('/create-job-folder', {\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Job 폴더 생성 실패:', error);\n      throw error;\n    }\n  },\n  // Job 폴더 정리\n  async cleanupJobFolder(jobId, keepOutput = true) {\n    try {\n      const response = await apiClient.post('/cleanup-job-folder', {\n        job_id: jobId,\n        keep_output: keepOutput\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Job 폴더 정리 실패:', error);\n      throw error;\n    }\n  },\n  // 북마크 비디오 목록 조회\n  async getBookmarkVideos() {\n    try {\n      const response = await apiClient.get('/bookmark-videos');\n      return response.data;\n    } catch (error) {\n      console.error('북마크 비디오 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 북마크 비디오 URL 생성\n  getBookmarkVideoUrl(filename) {\n    return `/bookmark-videos/${encodeURIComponent(filename)}`;\n  },\n  // 북마크 비디오 썸네일 URL 생성\n  getBookmarkThumbnailUrl(filename) {\n    const thumbnailFilename = filename.replace('.mp4', '.jpg');\n    return `/bookmark-videos/${encodeURIComponent(thumbnailFilename)}`;\n  },\n  // 북마크 비디오를 Job 폴더로 복사\n  async copyBookmarkVideo(jobId, videoFilename, imageIndex) {\n    try {\n      const response = await apiClient.post('/copy-bookmark-video', {\n        job_id: jobId,\n        video_filename: videoFilename,\n        image_index: imageIndex\n      });\n      return response.data;\n    } catch (error) {\n      console.error('북마크 비디오 복사 실패:', error);\n      throw error;\n    }\n  },\n  // 북마크 이미지 목록 조회\n  async getBookmarkImages() {\n    try {\n      const response = await apiClient.get('/bookmark-images');\n      return response.data;\n    } catch (error) {\n      console.error('북마크 이미지 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n  // 북마크 이미지를 Job 폴더로 복사\n  async copyBookmarkImage(jobId, imageFilename, imageIndex) {\n    try {\n      const response = await apiClient.post('/copy-bookmark-image', {\n        job_id: jobId,\n        video_filename: imageFilename,\n        // backend에서 동일한 필드명 사용\n        image_index: imageIndex\n      });\n      return response.data;\n    } catch (error) {\n      console.error('북마크 이미지 복사 실패:', error);\n      throw error;\n    }\n  }\n};\n\n// 개별 함수들도 export\nexport const {\n  createJobFolder,\n  cleanupJobFolder\n} = apiService;\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","status","removeItem","window","location","href","apiService","checkHealth","get","data","getBgmList","bgmData","Object","values","Error","message","getBgmFiles","mood","generateVideo","formData","FormData","append","content","musicMood","String","useTestFiles","backendImageMode","imageUploadMode","textPosition","textStyle","titleAreaMode","voiceNarration","crossDissolve","subtitleDuration","undefined","titleFont","bodyFont","titleFontSize","bodyFontSize","musicFile","filename","images","length","forEach","image","imageIndex","__imageIndex","fileNumber","fileExtension","name","split","pop","log","warn","post","getVideoDownloadUrl","videoPath","getBgmUrl","encodeURIComponent","generateVideoAsync","userEmail","editedTexts","imagePanningOptions","jobId","getJobStatus","getQueueStats","getSecureDownloadUrl","generatePreview","title","body1","JSON","stringify","createJobFolder","job_id","cleanupJobFolder","keepOutput","keep_output","getBookmarkVideos","getBookmarkVideoUrl","getBookmarkThumbnailUrl","thumbnailFilename","replace","copyBookmarkVideo","videoFilename","video_filename","image_index","getBookmarkImages","copyBookmarkImage","imageFilename"],"sources":["/zstus/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, GenerateVideoRequest, MusicFolder, MusicFile, MusicMood, ImageUploadMode, TextPosition, TextStyle, AsyncVideoRequest, AsyncVideoResponse, JobInfo, VoiceNarration, TitleAreaMode, CrossDissolve, CreateJobFolderResponse, CleanupJobFolderResponse, BookmarkVideo, BookmarkImage } from '../types';\n\n// API 베이스 URL 설정\nconst API_BASE_URL = '/api';\n\n// Axios 인스턴스 생성\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 400000, // 약 6.7분 (영상 생성 시간 고려)\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - 인증 토큰 추가\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 에러 처리\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    if (error.response?.status === 401) {\n      // 인증 오류시 로그아웃 처리\n      localStorage.removeItem('authToken');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // 서버 상태 확인\n  async checkHealth(): Promise<ApiResponse> {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n\n  // BGM 목록 조회\n  async getBgmList(): Promise<MusicFolder[]> {\n    try {\n      const response = await apiClient.get('/bgm-list');\n      if (response.data.status === 'success') {\n        const bgmData = response.data.data;\n        return Object.values(bgmData) as MusicFolder[];\n      } else {\n        throw new Error(response.data.message || 'BGM 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error('BGM 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 특정 성격의 BGM 파일 목록 조회\n  async getBgmFiles(mood: MusicMood): Promise<MusicFile[]> {\n    try {\n      const response = await apiClient.get(`/bgm/${mood}`);\n      if (response.data.status === 'success') {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'BGM 파일 목록 조회 실패');\n      }\n    } catch (error) {\n      console.error(`BGM 파일 목록 조회 실패 (${mood}):`, error);\n      throw error;\n    }\n  },\n\n  // 영상 생성\n  async generateVideo(data: {\n    content: string;\n    images: File[];\n    imageUploadMode: ImageUploadMode;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    musicFile?: MusicFile;\n    musicMood: MusicMood;\n    useTestFiles?: boolean;\n    titleFont?: string;\n    bodyFont?: string;\n    titleFontSize?: number;\n    bodyFontSize?: number;\n    voiceNarration: VoiceNarration;\n    crossDissolve: CrossDissolve;\n    subtitleDuration?: number;\n  }): Promise<ApiResponse> {\n    const formData = new FormData();\n    \n    // JSON 데이터 추가\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script'\n      ? '1_per_image'\n      : data.imageUploadMode === 'per-two-scripts'\n        ? '2_per_image'\n        : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 추가\n    formData.append('text_position', data.textPosition);\n\n    // 텍스트 스타일 추가\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 크로스 디졸브 설정 추가\n    formData.append('cross_dissolve', data.crossDissolve);\n\n    // 자막 지속 시간 추가\n    if (data.subtitleDuration !== undefined) {\n      formData.append('subtitle_duration', String(data.subtitleDuration));\n    }\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      // 이미지 파일을 FormData로 직접 첨부\n      data.images.forEach((image) => {\n        // __imageIndex 속성을 사용하여 올바른 번호로 업로드\n        const imageIndex = (image as any).__imageIndex;\n        if (typeof imageIndex === 'number') {\n          const fileNumber = imageIndex + 1; // 0-based → 1-based\n          const fileExtension = image.name.split('.').pop();\n          formData.append(`image_${fileNumber}`, image, `${fileNumber}.${fileExtension}`);\n          console.log(`📤 업로드: image_${fileNumber} → ${fileNumber}.${fileExtension} (imageIndex: ${imageIndex})`);\n        } else {\n          console.warn(`⚠️ 이미지에 __imageIndex가 없습니다:`, image.name);\n        }\n      });\n      // image_urls는 빈 배열로 전송 (파일 업로드 방식 사용)\n      formData.append('image_urls', '[]');\n    } else {\n      formData.append('image_urls', '[]');\n    }\n\n    try {\n      const response = await apiClient.post('/generate-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('영상 생성 실패:', error);\n      throw error;\n    }\n  },\n\n  // 영상 파일 다운로드 URL 생성\n  getVideoDownloadUrl(videoPath: string): string {\n    // video_path에서 파일명 추출\n    const filename = videoPath.split('/').pop();\n    return `/videos/${filename}`;\n  },\n\n  // BGM 파일 URL 생성 (미리듣기용)\n  getBgmUrl(mood: MusicMood, filename: string): string {\n    return `/bgm/${mood}/${encodeURIComponent(filename)}`;\n  },\n\n  // 배치 작업 관련 API 메서드들\n\n  // 비동기 영상 생성 요청\n  async generateVideoAsync(data: {\n    userEmail: string;\n    content: string;\n    images: File[];\n    imageUploadMode: ImageUploadMode;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    musicFile?: MusicFile;\n    musicMood: MusicMood;\n    useTestFiles?: boolean;\n    titleFont?: string;\n    bodyFont?: string;\n    titleFontSize?: number;\n    bodyFontSize?: number;\n    voiceNarration: VoiceNarration;\n    crossDissolve: CrossDissolve;\n    subtitleDuration?: number;\n    jobId?: string;  // Job ID 추가\n    editedTexts?: string; // 수정된 텍스트 (JSON 문자열)\n    imagePanningOptions?: string; // 🎨 이미지별 패닝 옵션 (JSON 문자열)\n  }): Promise<AsyncVideoResponse> {\n    const formData = new FormData();\n\n    // 필수 데이터 추가\n    formData.append('user_email', data.userEmail);\n    formData.append('content_data', data.content);\n    formData.append('music_mood', data.musicMood);\n    formData.append('use_test_files', String(data.useTestFiles || false));\n\n    // 수정된 텍스트 추가\n    if (data.editedTexts) {\n      formData.append('edited_texts', data.editedTexts);\n    }\n\n    // 🎨 이미지별 패닝 옵션 추가\n    if (data.imagePanningOptions) {\n      formData.append('image_panning_options', data.imagePanningOptions);\n      console.log('🎨 apiService - 패닝 옵션 전달:', data.imagePanningOptions);\n    }\n\n    // 이미지 할당 모드 추가 (백엔드 형식에 맞게 변환)\n    const backendImageMode = data.imageUploadMode === 'per-script'\n      ? '1_per_image'\n      : data.imageUploadMode === 'per-two-scripts'\n        ? '2_per_image'\n        : 'single_for_all';\n    formData.append('image_allocation_mode', backendImageMode);\n\n    // 텍스트 위치 및 스타일 추가\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n\n    // 타이틀 영역 모드 추가\n    formData.append('title_area_mode', data.titleAreaMode);\n\n    // 자막 읽어주기 설정 추가\n    formData.append('voice_narration', data.voiceNarration);\n\n    // 크로스 디졸브 설정 추가\n    formData.append('cross_dissolve', data.crossDissolve);\n\n    // 자막 지속 시간 추가\n    if (data.subtitleDuration !== undefined) {\n      formData.append('subtitle_duration', String(data.subtitleDuration));\n    }\n\n    // 폰트 설정 추가\n    if (data.titleFont) {\n      formData.append('title_font', data.titleFont);\n    }\n    if (data.bodyFont) {\n      formData.append('body_font', data.bodyFont);\n    }\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n\n    // 선택된 음악 파일 경로 추가\n    if (data.musicFile) {\n      formData.append('selected_bgm_path', data.musicFile.filename);\n    }\n\n    // Job ID 추가\n    if (data.jobId) {\n      formData.append('job_id', data.jobId);\n    }\n\n    // 이미지 파일들 추가\n    if (data.images.length > 0 && !data.useTestFiles) {\n      data.images.forEach((image) => {\n        // __imageIndex 속성을 사용하여 올바른 번호로 업로드\n        const imageIndex = (image as any).__imageIndex;\n        if (typeof imageIndex === 'number') {\n          const fileNumber = imageIndex + 1; // 0-based → 1-based\n          const fileExtension = image.name.split('.').pop();\n          formData.append(`image_${fileNumber}`, image, `${fileNumber}.${fileExtension}`);\n          console.log(`📤 비동기 업로드: image_${fileNumber} → ${fileNumber}.${fileExtension} (imageIndex: ${imageIndex})`);\n        } else {\n          console.warn(`⚠️ 비동기: 이미지에 __imageIndex가 없습니다:`, image.name);\n        }\n      });\n    }\n\n    try {\n      const response = await apiClient.post('/generate-video-async', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('비동기 영상 생성 요청 실패:', error);\n      throw error;\n    }\n  },\n\n  // 작업 상태 조회\n  async getJobStatus(jobId: string): Promise<JobInfo> {\n    try {\n      const response = await apiClient.get(`/job-status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('작업 상태 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 큐 통계 조회 (관리용)\n  async getQueueStats(): Promise<{ status: string; stats: any }> {\n    try {\n      const response = await apiClient.get('/queue-stats');\n      return response.data;\n    } catch (error) {\n      console.error('큐 통계 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 보안 다운로드 링크 생성\n  getSecureDownloadUrl(token: string): string {\n    return `/api/download-video?token=${encodeURIComponent(token)}`;\n  },\n\n  // 미리보기 생성\n  async generatePreview(data: {\n    title: string;\n    body1: string;\n    textPosition: TextPosition;\n    textStyle: TextStyle;\n    titleAreaMode: TitleAreaMode;\n    titleFont: string;\n    bodyFont: string;\n    titleFontSize?: number;\n    bodyFontSize?: number;\n    image?: File;\n    imagePanningOptions?: { [key: number]: boolean };  // 패닝 옵션 추가\n    jobId?: string;  // Job ID 추가\n  }): Promise<{ status: string; preview_url: string; message: string }> {\n    const formData = new FormData();\n\n    formData.append('title', data.title);\n    formData.append('body1', data.body1);\n    formData.append('text_position', data.textPosition);\n    formData.append('text_style', data.textStyle);\n    formData.append('title_area_mode', data.titleAreaMode);\n    formData.append('title_font', data.titleFont);\n    formData.append('body_font', data.bodyFont);\n\n    if (data.titleFontSize) {\n      formData.append('title_font_size', String(data.titleFontSize));\n    }\n    if (data.bodyFontSize) {\n      formData.append('body_font_size', String(data.bodyFontSize));\n    }\n\n    if (data.jobId) {\n      formData.append('job_id', data.jobId);  // Job ID 추가\n    }\n\n    if (data.imagePanningOptions) {\n      formData.append('image_panning_options', JSON.stringify(data.imagePanningOptions));\n    }\n\n    if (data.image) {\n      formData.append('image_1', data.image);\n    }\n\n    try {\n      const response = await apiClient.post('/preview-video', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('미리보기 생성 실패:', error);\n      throw error;\n    }\n  },\n\n  // Job 폴더 생성\n  async createJobFolder(jobId: string): Promise<CreateJobFolderResponse> {\n    try {\n      const response = await apiClient.post('/create-job-folder', {\n        job_id: jobId,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Job 폴더 생성 실패:', error);\n      throw error;\n    }\n  },\n\n  // Job 폴더 정리\n  async cleanupJobFolder(jobId: string, keepOutput: boolean = true): Promise<CleanupJobFolderResponse> {\n    try {\n      const response = await apiClient.post('/cleanup-job-folder', {\n        job_id: jobId,\n        keep_output: keepOutput,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Job 폴더 정리 실패:', error);\n      throw error;\n    }\n  },\n\n  // 북마크 비디오 목록 조회\n  async getBookmarkVideos(): Promise<{ status: string; message: string; data: BookmarkVideo[] }> {\n    try {\n      const response = await apiClient.get('/bookmark-videos');\n      return response.data;\n    } catch (error) {\n      console.error('북마크 비디오 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 북마크 비디오 URL 생성\n  getBookmarkVideoUrl(filename: string): string {\n    return `/bookmark-videos/${encodeURIComponent(filename)}`;\n  },\n\n  // 북마크 비디오 썸네일 URL 생성\n  getBookmarkThumbnailUrl(filename: string): string {\n    const thumbnailFilename = filename.replace('.mp4', '.jpg');\n    return `/bookmark-videos/${encodeURIComponent(thumbnailFilename)}`;\n  },\n\n  // 북마크 비디오를 Job 폴더로 복사\n  async copyBookmarkVideo(jobId: string, videoFilename: string, imageIndex: number): Promise<{\n    status: string;\n    message: string;\n    data: { filename: string; file_url: string; image_index: number };\n  }> {\n    try {\n      const response = await apiClient.post('/copy-bookmark-video', {\n        job_id: jobId,\n        video_filename: videoFilename,\n        image_index: imageIndex,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('북마크 비디오 복사 실패:', error);\n      throw error;\n    }\n  },\n\n  // 북마크 이미지 목록 조회\n  async getBookmarkImages(): Promise<{ status: string; message: string; data: BookmarkImage[] }> {\n    try {\n      const response = await apiClient.get('/bookmark-images');\n      return response.data;\n    } catch (error) {\n      console.error('북마크 이미지 목록 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  // 북마크 이미지를 Job 폴더로 복사\n  async copyBookmarkImage(jobId: string, imageFilename: string, imageIndex: number): Promise<{\n    status: string;\n    message: string;\n    data: { filename: string; file_url: string; image_index: number };\n  }> {\n    try {\n      const response = await apiClient.post('/copy-bookmark-image', {\n        job_id: jobId,\n        video_filename: imageFilename,  // backend에서 동일한 필드명 사용\n        image_index: imageIndex,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('북마크 이미지 복사 실패:', error);\n      throw error;\n    }\n  }\n};\n\n// 개별 함수들도 export\nexport const { createJobFolder, cleanupJobFolder } = apiService;\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}