{"ast":null,"code":"var _jsxFileName = \"/zstus/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// JWT 토큰을 디코딩하는 함수\nconst decodeJWT = token => {\n  try {\n    const payload = token.split('.')[1];\n    const decoded = JSON.parse(atob(payload));\n    return decoded;\n  } catch (error) {\n    console.error('JWT 디코딩 실패:', error);\n    return null;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 컴포넌트 마운트시 저장된 토큰 확인\n  useEffect(() => {\n    const savedToken = localStorage.getItem('authToken');\n    if (savedToken) {\n      const payload = decodeJWT(savedToken);\n      if (payload && payload.exp * 1000 > Date.now()) {\n        setUser({\n          id: payload.sub,\n          email: payload.email,\n          name: payload.name,\n          picture: payload.picture\n        });\n      } else {\n        localStorage.removeItem('authToken');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Google OAuth 로그인 처리\n  const login = credential => {\n    const payload = decodeJWT(credential);\n    if (payload) {\n      const newUser = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture\n      };\n      setUser(newUser);\n      localStorage.setItem('authToken', credential);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n\n  // 로그아웃 처리\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n\n    // Google OAuth 로그아웃\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n  };\n  const value = {\n    user,\n    isLoading,\n    login,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth는 AuthProvider 내에서 사용되어야 합니다');\n  }\n  return context;\n};\n\n// Google OAuth 초기화\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const initializeGoogleAuth = () => {\n  if (window.google) {\n    window.google.accounts.id.initialize({\n      client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || '',\n      callback: response => {\n        // 이 부분은 실제 로그인 컴포넌트에서 처리됩니다\n        console.log('Google OAuth 응답:', response);\n      }\n    });\n  }\n};\n\n// Google OAuth 타입 확장\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","undefined","decodeJWT","token","payload","split","decoded","JSON","parse","atob","error","console","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","savedToken","localStorage","getItem","exp","Date","now","id","sub","email","name","picture","removeItem","login","credential","newUser","setItem","stringify","logout","window","google","accounts","disableAutoSelect","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","initializeGoogleAuth","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","response","log","$RefreshReg$"],"sources":["/zstus/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User, GoogleCredentialResponse, GoogleJWTPayload } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (credential: string) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// JWT 토큰을 디코딩하는 함수\nconst decodeJWT = (token: string): GoogleJWTPayload | null => {\n  try {\n    const payload = token.split('.')[1];\n    const decoded = JSON.parse(atob(payload));\n    return decoded;\n  } catch (error) {\n    console.error('JWT 디코딩 실패:', error);\n    return null;\n  }\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 컴포넌트 마운트시 저장된 토큰 확인\n  useEffect(() => {\n    const savedToken = localStorage.getItem('authToken');\n    if (savedToken) {\n      const payload = decodeJWT(savedToken);\n      if (payload && payload.exp * 1000 > Date.now()) {\n        setUser({\n          id: payload.sub,\n          email: payload.email,\n          name: payload.name,\n          picture: payload.picture,\n        });\n      } else {\n        localStorage.removeItem('authToken');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Google OAuth 로그인 처리\n  const login = (credential: string) => {\n    const payload = decodeJWT(credential);\n    if (payload) {\n      const newUser: User = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n      };\n      \n      setUser(newUser);\n      localStorage.setItem('authToken', credential);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n\n  // 로그아웃 처리\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    \n    // Google OAuth 로그아웃\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth는 AuthProvider 내에서 사용되어야 합니다');\n  }\n  return context;\n};\n\n// Google OAuth 초기화\nexport const initializeGoogleAuth = () => {\n  if (window.google) {\n    window.google.accounts.id.initialize({\n      client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || '',\n      callback: (response: GoogleCredentialResponse) => {\n        // 이 부분은 실제 로그인 컴포넌트에서 처리됩니다\n        console.log('Google OAuth 응답:', response);\n      },\n    });\n  }\n};\n\n// Google OAuth 타입 확장\ndeclare global {\n  interface Window {\n    google: {\n      accounts: {\n        id: {\n          initialize: (config: any) => void;\n          renderButton: (element: HTMLElement, options: any) => void;\n          prompt: () => void;\n          disableAutoSelect: () => void;\n        };\n      };\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}