{"ast":null,"code":"import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport { trackStream } from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport { progressEventReducer, progressEventDecorator, asyncDecorator } from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst {\n  isFunction\n} = utils;\nconst globalFetchAPI = (({\n  fetch,\n  Request,\n  Response\n}) => ({\n  fetch,\n  Request,\n  Response\n}))(utils.global);\nconst {\n  ReadableStream,\n  TextEncoder\n} = utils.global;\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false;\n  }\n};\nconst factory = env => {\n  const {\n    fetch,\n    Request,\n    Response\n  } = Object.assign({}, globalFetchAPI, env);\n  const isFetchSupported = isFunction(fetch);\n  const isRequestSupported = isFunction(Request);\n  const isResponseSupported = isFunction(Response);\n  if (!isFetchSupported) {\n    return false;\n  }\n  const isReadableStreamSupported = isFetchSupported && isFunction(ReadableStream);\n  const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? (encoder => str => encoder.encode(str))(new TextEncoder()) : async str => new Uint8Array(await new Request(str).arrayBuffer()));\n  const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {\n    let duplexAccessed = false;\n    const hasContentType = new Request(platform.origin, {\n      body: new ReadableStream(),\n      method: 'POST',\n      get duplex() {\n        duplexAccessed = true;\n        return 'half';\n      }\n    }).headers.has('Content-Type');\n    return duplexAccessed && !hasContentType;\n  });\n  const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test(() => utils.isReadableStream(new Response('').body));\n  const resolvers = {\n    stream: supportsResponseStream && (res => res.body)\n  };\n  isFetchSupported && (() => {\n    ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n      !resolvers[type] && (resolvers[type] = (res, config) => {\n        let method = res && res[type];\n        if (method) {\n          return method.call(res);\n        }\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      });\n    });\n  })();\n  const getBodyLength = async body => {\n    if (body == null) {\n      return 0;\n    }\n    if (utils.isBlob(body)) {\n      return body.size;\n    }\n    if (utils.isSpecCompliantForm(body)) {\n      const _request = new Request(platform.origin, {\n        method: 'POST',\n        body\n      });\n      return (await _request.arrayBuffer()).byteLength;\n    }\n    if (utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n      return body.byteLength;\n    }\n    if (utils.isURLSearchParams(body)) {\n      body = body + '';\n    }\n    if (utils.isString(body)) {\n      return (await encodeText(body)).byteLength;\n    }\n  };\n  const resolveBodyLength = async (headers, body) => {\n    const length = utils.toFiniteNumber(headers.getContentLength());\n    return length == null ? getBodyLength(body) : length;\n  };\n  return async config => {\n    let {\n      url,\n      method,\n      data,\n      signal,\n      cancelToken,\n      timeout,\n      onDownloadProgress,\n      onUploadProgress,\n      responseType,\n      headers,\n      withCredentials = 'same-origin',\n      fetchOptions\n    } = resolveConfig(config);\n    responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n    let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n    let request = null;\n    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n    });\n    let requestContentLength;\n    try {\n      if (onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {\n        let _request = new Request(url, {\n          method: 'POST',\n          body: data,\n          duplex: \"half\"\n        });\n        let contentTypeHeader;\n        if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n          headers.setContentType(contentTypeHeader);\n        }\n        if (_request.body) {\n          const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));\n          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n        }\n      }\n      if (!utils.isString(withCredentials)) {\n        withCredentials = withCredentials ? 'include' : 'omit';\n      }\n\n      // Cloudflare Workers throws when credentials are defined\n      // see https://github.com/cloudflare/workerd/issues/902\n      const isCredentialsSupported = isRequestSupported && \"credentials\" in Request.prototype;\n      const resolvedOptions = {\n        ...fetchOptions,\n        signal: composedSignal,\n        method: method.toUpperCase(),\n        headers: headers.normalize().toJSON(),\n        body: data,\n        duplex: \"half\",\n        credentials: isCredentialsSupported ? withCredentials : undefined\n      };\n      request = isRequestSupported && new Request(url, resolvedOptions);\n      let response = await (isRequestSupported ? fetch(request, fetchOptions) : fetch(url, resolvedOptions));\n      const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {\n        const options = {};\n        ['status', 'statusText', 'headers'].forEach(prop => {\n          options[prop] = response[prop];\n        });\n        const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];\n        response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }), options);\n      }\n      responseType = responseType || 'text';\n      let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n      !isStreamResponse && unsubscribe && unsubscribe();\n      return await new Promise((resolve, reject) => {\n        settle(resolve, reject, {\n          data: responseData,\n          headers: AxiosHeaders.from(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          config,\n          request\n        });\n      });\n    } catch (err) {\n      unsubscribe && unsubscribe();\n      if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {\n        throw Object.assign(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request), {\n          cause: err.cause || err\n        });\n      }\n      throw AxiosError.from(err, err && err.code, config, request);\n    }\n  };\n};\nconst seedCache = new Map();\nexport const getFetch = config => {\n  let env = utils.merge.call({\n    skipUndefined: true\n  }, globalFetchAPI, config ? config.env : null);\n  const {\n    fetch,\n    Request,\n    Response\n  } = env;\n  const seeds = [Request, Response, fetch];\n  let len = seeds.length,\n    i = len,\n    seed,\n    target,\n    map = seedCache;\n  while (i--) {\n    seed = seeds[i];\n    target = map.get(seed);\n    target === undefined && map.set(seed, target = i ? new Map() : factory(env));\n    map = target;\n  }\n  return target;\n};\nconst adapter = getFetch();\nexport default adapter;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}