{"ast":null,"code":"var _jsxFileName = \"/zstus/frontend/src/components/ImageStep.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Box, Paper, Typography, Button, FormControl, RadioGroup, FormControlLabel, Radio, Alert, LinearProgress, CircularProgress, Divider } from '@mui/material';\nimport { CloudUpload, AutoFixHigh } from '@mui/icons-material';\nimport { useDropzone } from 'react-dropzone';\nimport TextImagePairManager from './TextImagePairManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageStep = ({\n  images,\n  imageUploadMode,\n  content,\n  jobId,\n  // Job ID 추가\n  onChange,\n  onEditedTextsChange,\n  // 수정된 텍스트 콜백\n  onNext,\n  onBack\n}) => {\n  _s();\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [errors, setErrors] = useState([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationProgress, setGenerationProgress] = useState('');\n\n  // 필요한 이미지 개수 계산\n  const getRequiredImageCount = () => {\n    const scriptCount = Object.values(content).slice(1) // title 제외\n    .filter(script => script === null || script === void 0 ? void 0 : script.trim()).length;\n    if (imageUploadMode === 'per-script') {\n      return scriptCount;\n    } else if (imageUploadMode === 'per-two-scripts') {\n      return Math.ceil(scriptCount / 2);\n    } else {\n      // single-for-all\n      return 1;\n    }\n  };\n  const requiredImageCount = getRequiredImageCount();\n  const onDrop = useCallback(acceptedFiles => {\n    const validFiles = [];\n    const newErrors = [];\n    acceptedFiles.forEach((file, index) => {\n      // 파일 크기 검증 (모드에 따라 다른 제한)\n      const maxSize = imageUploadMode === 'single-for-all' ? 80 * 1024 * 1024 : 40 * 1024 * 1024;\n      const maxSizeText = imageUploadMode === 'single-for-all' ? '80MB' : '40MB';\n      if (file.size > maxSize) {\n        newErrors.push(`${file.name}: 파일 크기가 ${maxSizeText}를 초과합니다`);\n        return;\n      }\n\n      // 파일 형식 검증 (이미지 + 비디오)\n      const isImage = file.type.startsWith('image/');\n      const isVideo = file.type.startsWith('video/');\n      if (!isImage && !isVideo) {\n        newErrors.push(`${file.name}: 이미지 또는 비디오 파일만 업로드 가능합니다`);\n        return;\n      }\n      validFiles.push(file);\n\n      // 업로드 진행률 시뮬레이션\n      setUploadProgress(prev => ({\n        ...prev,\n        [file.name]: 0\n      }));\n\n      // 가상의 업로드 진행률\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        setUploadProgress(prev => ({\n          ...prev,\n          [file.name]: progress\n        }));\n        if (progress >= 100) {\n          clearInterval(interval);\n          setTimeout(() => {\n            setUploadProgress(prev => {\n              const newProgress = {\n                ...prev\n              };\n              delete newProgress[file.name];\n              return newProgress;\n            });\n          }, 500);\n        }\n      }, 100);\n    });\n    if (validFiles.length > 0) {\n      // 스마트 이미지 할당: 빈 슬롯부터 채우기\n      const updatedImages = [...images];\n\n      // 각 valid 파일에 대해 첫 번째로 비어있는 슬롯에 __imageIndex 설정하여 추가\n      let validFileIndex = 0;\n      for (let i = 0; i < requiredImageCount && validFileIndex < validFiles.length; i++) {\n        // 해당 인덱스에 이미지가 없으면 새 파일 할당\n        const hasImageAtIndex = images.some(img => img.__imageIndex === i);\n        if (!hasImageAtIndex) {\n          const file = validFiles[validFileIndex];\n          file.__imageIndex = i;\n          updatedImages.push(file);\n          validFileIndex++;\n        }\n      }\n\n      // 위치 정보 기준으로 정렬\n      updatedImages.sort((a, b) => {\n        var _imageIndex, _imageIndex2;\n        const indexA = (_imageIndex = a.__imageIndex) !== null && _imageIndex !== void 0 ? _imageIndex : 0;\n        const indexB = (_imageIndex2 = b.__imageIndex) !== null && _imageIndex2 !== void 0 ? _imageIndex2 : 0;\n        return indexA - indexB;\n      });\n      onChange(updatedImages, imageUploadMode);\n    }\n    setErrors(newErrors);\n  }, [images, imageUploadMode, requiredImageCount, onChange]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp'],\n      'video/*': ['.mp4', '.mov', '.avi', '.webm', '.mkv']\n    },\n    // 무제한 파일 업로드 허용 (빈 슬롯에 자동 할당)\n    maxFiles: undefined,\n    disabled: false\n  });\n  const removeImage = imageIndex => {\n    // 특정 __imageIndex를 가진 파일만 제거\n    const newImages = images.filter(img => img.__imageIndex !== imageIndex);\n    onChange(newImages, imageUploadMode);\n  };\n  const handleModeChange = event => {\n    const newMode = event.target.value;\n    const scriptCount = Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length;\n    let newRequiredCount;\n    if (newMode === 'per-script') {\n      newRequiredCount = scriptCount;\n    } else if (newMode === 'per-two-scripts') {\n      newRequiredCount = Math.ceil(scriptCount / 2);\n    } else {\n      // single-for-all\n      newRequiredCount = 1;\n    }\n\n    // 기존 이미지가 새로운 요구사항보다 많으면 자르기\n    const newImages = images.slice(0, newRequiredCount);\n    onChange(newImages, newMode);\n  };\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  const getMediaPreview = file => {\n    return URL.createObjectURL(file);\n  };\n  const isVideoFile = file => {\n    return file.type.startsWith('video/');\n  };\n\n  // 위치 정보가 있는 실제 이미지 개수 계산\n  const getActualImageCount = () => {\n    return images.filter(img => typeof img.__imageIndex === 'number').length;\n  };\n  const canProceed = getActualImageCount() === requiredImageCount;\n\n  // 자동 이미지 생성 함수\n  const handleAutoGenerate = async mode => {\n    setIsGenerating(true);\n    setErrors([]);\n    try {\n      // content에서 body 텍스트들 추출\n      const bodyTexts = Object.entries(content).filter(([key, value]) => key.startsWith('body') && (value === null || value === void 0 ? void 0 : value.trim())).map(([key, value]) => value.trim());\n      if (bodyTexts.length === 0) {\n        setErrors(['대본 내용이 없습니다. 먼저 대본을 작성해주세요.']);\n        setIsGenerating(false);\n        return;\n      }\n      setGenerationProgress('이미지 생성 중...');\n      const response = await fetch('/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          texts: bodyTexts,\n          mode: mode,\n          job_id: jobId // Job ID 추가\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || ' 이미지 생성에 실패했습니다');\n      }\n      const data = await response.json();\n      const imageUrls = data.image_urls;\n      setGenerationProgress('이미지 다운로드 중...');\n\n      // 백엔드에서 저장된 이미지를 다운로드하고 File 객체로 변환\n      const imageFiles = await Promise.all(imageUrls.filter(url => url.trim() !== '').map(async (url, index) => {\n        // 백엔드와 같은 서버를 사용하므로 상대 경로로 접근\n        const fullUrl = url.startsWith('http') ? url : url;\n        const imageResponse = await fetch(fullUrl);\n        if (!imageResponse.ok) {\n          throw new Error(`이미지 다운로드 실패: ${index + 1}`);\n        }\n        const blob = await imageResponse.blob();\n        const fileName = `generated_image_${index + 1}.png`;\n        const file = new File([blob], fileName, {\n          type: 'image/png'\n        });\n\n        // 🔧 중요: TextImagePairManager에서 매칭을 위한 __imageIndex 설정\n        file.__imageIndex = index;\n        return file;\n      }));\n\n      // 🔧 기존 이미지와 새로 생성된 이미지를 스마트하게 병합\n      // 빈 슬롯부터 채우고, imageIndex 순으로 정렬\n      const updatedImages = [...images];\n      imageFiles.forEach(file => {\n        const targetIndex = file.__imageIndex;\n        // 해당 인덱스에 기존 이미지가 있으면 교체, 없으면 추가\n        const existingIndex = updatedImages.findIndex(img => img.__imageIndex === targetIndex);\n        if (existingIndex >= 0) {\n          updatedImages[existingIndex] = file;\n        } else {\n          updatedImages.push(file);\n        }\n      });\n\n      // imageIndex 순으로 정렬\n      updatedImages.sort((a, b) => {\n        var _imageIndex3, _imageIndex4;\n        const indexA = (_imageIndex3 = a.__imageIndex) !== null && _imageIndex3 !== void 0 ? _imageIndex3 : 0;\n        const indexB = (_imageIndex4 = b.__imageIndex) !== null && _imageIndex4 !== void 0 ? _imageIndex4 : 0;\n        return indexA - indexB;\n      });\n\n      // 필요한 개수만큼만 유지\n      const finalImages = updatedImages.slice(0, requiredImageCount);\n      onChange(finalImages, imageUploadMode);\n      const successCount = imageFiles.length;\n      const totalRequested = imageUrls.length;\n      if (successCount === totalRequested) {\n        setGenerationProgress('이미지 생성 완료!');\n      } else {\n        setGenerationProgress(`이미지 생성 완료! (${successCount}/${totalRequested}개 성공)`);\n      }\n      setTimeout(() => setGenerationProgress(''), 3000);\n    } catch (error) {\n      console.error('이미지 생성 중 오류:', error);\n      setErrors([error instanceof Error ? error.message : '이미지 생성 중 오류가 발생했습니다']);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      gutterBottom: true,\n      children: \"\\uBBF8\\uB514\\uC5B4 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      sx: {\n        mb: 3\n      },\n      children: \"\\uB9B4\\uC2A4 \\uC601\\uC0C1\\uC758 \\uBC30\\uACBD\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD560 \\uC774\\uBBF8\\uC9C0 \\uB610\\uB294 \\uC601\\uC0C1\\uC744 \\uC5C5\\uB85C\\uB4DC\\uD558\\uC138\\uC694. (\\uC774\\uBBF8\\uC9C0: JPG, PNG, GIF, WebP / \\uC601\\uC0C1: MP4, MOV, AVI, WebM, MKV)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"\\uC5C5\\uB85C\\uB4DC \\uBAA8\\uB4DC \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: imageUploadMode,\n          onChange: handleModeChange,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"per-two-scripts\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: \"\\uB300\\uC0AC 2\\uAC1C\\uB9C8\\uB2E4 \\uBBF8\\uB514\\uC5B4 1\\uAC1C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  children: [\"\\uD544\\uC694 \\uBBF8\\uB514\\uC5B4: \", Math.ceil(Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length / 2), \"\\uAC1C (\\uAC01 \\uCD5C\\uB300 10MB)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              startIcon: /*#__PURE__*/_jsxDEV(AutoFixHigh, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleAutoGenerate('per_two_scripts'),\n              disabled: isGenerating || Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length === 0,\n              sx: {\n                ml: 2,\n                minWidth: 100\n              },\n              children: \"\\uC790\\uB3D9\\uC0DD\\uC131\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"per-script\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: \"\\uB300\\uC0AC\\uB9C8\\uB2E4 \\uBBF8\\uB514\\uC5B4 1\\uAC1C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  children: [\"\\uD544\\uC694 \\uBBF8\\uB514\\uC5B4: \", Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length, \"\\uAC1C (\\uAC01 \\uCD5C\\uB300 10MB)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              startIcon: /*#__PURE__*/_jsxDEV(AutoFixHigh, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleAutoGenerate('per_script'),\n              disabled: isGenerating || Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length === 0,\n              sx: {\n                ml: 2,\n                minWidth: 100\n              },\n              children: \"\\uC790\\uB3D9\\uC0DD\\uC131\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"single-for-all\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: \"\\uBAA8\\uB4E0 \\uB300\\uC0AC\\uC5D0 \\uBBF8\\uB514\\uC5B4 1\\uAC1C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  children: \"\\uD544\\uC694 \\uBBF8\\uB514\\uC5B4: 1\\uAC1C (\\uBAA8\\uB4E0 \\uB300\\uC0AC\\uC5D0 \\uB3D9\\uC77C\\uD55C \\uBBF8\\uB514\\uC5B4 \\uC0AC\\uC6A9, \\uCD5C\\uB300 40MB)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              startIcon: /*#__PURE__*/_jsxDEV(AutoFixHigh, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleAutoGenerate('single_for_all'),\n              disabled: isGenerating || Object.values(content).slice(1).filter(script => script === null || script === void 0 ? void 0 : script.trim()).length === 0,\n              sx: {\n                ml: 2,\n                minWidth: 100\n              },\n              children: \"\\uC790\\uB3D9\\uC0DD\\uC131\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), isGenerating && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          sx: {\n            mr: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"primary\",\n          children: generationProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this), generationProgress && !isGenerating && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mt: 2\n        },\n        children: generationProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"\\uBBF8\\uB514\\uC5B4 \\uD30C\\uC77C \\uBA40\\uD2F0 \\uB4DC\\uB798\\uADF8 \\uC601\\uC5ED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 2\n        },\n        children: \"\\uC5EC\\uB7EC \\uBBF8\\uB514\\uC5B4 \\uD30C\\uC77C\\uC744 \\uD55C \\uBC88\\uC5D0 \\uB4DC\\uB798\\uADF8\\uD558\\uC5EC \\uC5C5\\uB85C\\uB4DC\\uD558\\uC138\\uC694. \\uBE48 \\uC2AC\\uB86F\\uBD80\\uD130 \\uC790\\uB3D9\\uC73C\\uB85C \\uCC44\\uC6CC\\uC9D1\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ...getRootProps(),\n        sx: {\n          border: 2,\n          borderColor: isDragActive ? 'primary.main' : 'grey.300',\n          borderStyle: 'dashed',\n          borderRadius: 2,\n          p: 4,\n          textAlign: 'center',\n          cursor: 'pointer',\n          bgcolor: isDragActive ? 'action.hover' : 'background.paper',\n          transition: 'all 0.2s ease-in-out',\n          '&:hover': {\n            borderColor: 'primary.main',\n            bgcolor: 'action.hover'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloudUpload, {\n          sx: {\n            fontSize: 48,\n            color: 'grey.400',\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: isDragActive ? '여기에 파일을 놓으세요' : '미디어 파일을 드래그하거나 클릭하여 선택'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [\"\\uC9C0\\uC6D0 \\uD615\\uC2DD: JPG, PNG, GIF, WebP, BMP, MP4, MOV, AVI, WebM, MKV (\\uCD5C\\uB300 \", imageUploadMode === 'single-for-all' ? '40MB' : '10MB', \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: [\"\\uD604\\uC7AC \\uC0C1\\uD0DC: \", getActualImageCount(), \"/\", requiredImageCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), Object.entries(uploadProgress).map(([filename, progress]) => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          children: [filename, \" \\uC5C5\\uB85C\\uB4DC \\uC911...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: progress,\n          sx: {\n            mt: 0.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this)]\n      }, filename, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 11\n      }, this)), errors.map((error, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mt: 2\n        },\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this)), canProceed && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mt: 2\n        },\n        children: \"\\uBAA8\\uB4E0 \\uBBF8\\uB514\\uC5B4\\uAC00 \\uC5C5\\uB85C\\uB4DC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4! \\uB2E4\\uC74C \\uB2E8\\uACC4\\uB85C \\uC9C4\\uD589\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextImagePairManager, {\n        content: content,\n        imageUploadMode: imageUploadMode,\n        images: images,\n        jobId: jobId // Job ID 전달\n        ,\n        onChange: onChange,\n        onEditedTextsChange: onEditedTextsChange // 수정된 텍스트 콜백 전달\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: onBack,\n        size: \"large\",\n        children: \"\\uC774\\uC804: \\uB300\\uBCF8 \\uC791\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: onNext,\n        size: \"large\",\n        disabled: !canProceed,\n        children: \"\\uB2E4\\uC74C: \\uC74C\\uC545 \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageStep, \"99EmDkaP+Tvg59cjiaPlVpNXS6g=\", false, function () {\n  return [useDropzone];\n});\n_c = ImageStep;\nexport default ImageStep;\nvar _c;\n$RefreshReg$(_c, \"ImageStep\");","map":{"version":3,"names":["React","useState","useCallback","Box","Paper","Typography","Button","FormControl","RadioGroup","FormControlLabel","Radio","Alert","LinearProgress","CircularProgress","Divider","CloudUpload","AutoFixHigh","useDropzone","TextImagePairManager","jsxDEV","_jsxDEV","ImageStep","images","imageUploadMode","content","jobId","onChange","onEditedTextsChange","onNext","onBack","_s","uploadProgress","setUploadProgress","errors","setErrors","isGenerating","setIsGenerating","generationProgress","setGenerationProgress","getRequiredImageCount","scriptCount","Object","values","slice","filter","script","trim","length","Math","ceil","requiredImageCount","onDrop","acceptedFiles","validFiles","newErrors","forEach","file","index","maxSize","maxSizeText","size","push","name","isImage","type","startsWith","isVideo","prev","progress","interval","setInterval","clearInterval","setTimeout","newProgress","updatedImages","validFileIndex","i","hasImageAtIndex","some","img","__imageIndex","sort","a","b","_imageIndex","_imageIndex2","indexA","indexB","getRootProps","getInputProps","isDragActive","accept","maxFiles","undefined","disabled","removeImage","imageIndex","newImages","handleModeChange","event","newMode","target","value","newRequiredCount","formatFileSize","bytes","k","sizes","floor","log","parseFloat","pow","toFixed","getMediaPreview","URL","createObjectURL","isVideoFile","getActualImageCount","canProceed","handleAutoGenerate","mode","bodyTexts","entries","key","map","response","fetch","method","headers","body","JSON","stringify","texts","job_id","ok","errorData","json","Error","detail","data","imageUrls","image_urls","imageFiles","Promise","all","url","fullUrl","imageResponse","blob","fileName","File","targetIndex","existingIndex","findIndex","_imageIndex3","_imageIndex4","finalImages","successCount","totalRequested","error","console","message","children","variant","component","gutterBottom","_jsxFileName","lineNumber","columnNumber","color","sx","mb","p","display","alignItems","justifyContent","width","control","label","startIcon","onClick","ml","minWidth","mt","mr","severity","border","borderColor","borderStyle","borderRadius","textAlign","cursor","bgcolor","transition","fontSize","filename","_c","$RefreshReg$"],"sources":["/zstus/frontend/src/components/ImageStep.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Alert,\n  Card,\n  CardContent,\n  IconButton,\n  Chip,\n  LinearProgress,\n  CircularProgress,\n  Divider,\n} from '@mui/material';\nimport { CloudUpload, Delete, Image as ImageIcon, AutoFixHigh } from '@mui/icons-material';\nimport { useDropzone } from 'react-dropzone';\nimport { ReelsContent, ImageUploadMode } from '../types';\nimport TextImagePairManager from './TextImagePairManager';\n\ninterface ImageStepProps {\n  images: File[];\n  imageUploadMode: ImageUploadMode;\n  content: ReelsContent;\n  jobId: string; // Job ID 추가\n  onChange: (images: File[], mode: ImageUploadMode) => void;\n  onEditedTextsChange?: (editedTexts: { [key: number]: string[] }) => void; // 수정된 텍스트 콜백\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst ImageStep: React.FC<ImageStepProps> = ({\n  images,\n  imageUploadMode,\n  content,\n  jobId, // Job ID 추가\n  onChange,\n  onEditedTextsChange, // 수정된 텍스트 콜백\n  onNext,\n  onBack,\n}) => {\n  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});\n  const [errors, setErrors] = useState<string[]>([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationProgress, setGenerationProgress] = useState('');\n\n  // 필요한 이미지 개수 계산\n  const getRequiredImageCount = () => {\n    const scriptCount = Object.values(content)\n      .slice(1) // title 제외\n      .filter(script => script?.trim()).length;\n\n    if (imageUploadMode === 'per-script') {\n      return scriptCount;\n    } else if (imageUploadMode === 'per-two-scripts') {\n      return Math.ceil(scriptCount / 2);\n    } else { // single-for-all\n      return 1;\n    }\n  };\n\n  const requiredImageCount = getRequiredImageCount();\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const validFiles: File[] = [];\n    const newErrors: string[] = [];\n\n    acceptedFiles.forEach((file, index) => {\n      // 파일 크기 검증 (모드에 따라 다른 제한)\n      const maxSize = imageUploadMode === 'single-for-all' ? 80 * 1024 * 1024 : 40 * 1024 * 1024;\n      const maxSizeText = imageUploadMode === 'single-for-all' ? '80MB' : '40MB';\n\n      if (file.size > maxSize) {\n        newErrors.push(`${file.name}: 파일 크기가 ${maxSizeText}를 초과합니다`);\n        return;\n      }\n\n      // 파일 형식 검증 (이미지 + 비디오)\n      const isImage = file.type.startsWith('image/');\n      const isVideo = file.type.startsWith('video/');\n      \n      if (!isImage && !isVideo) {\n        newErrors.push(`${file.name}: 이미지 또는 비디오 파일만 업로드 가능합니다`);\n        return;\n      }\n\n      validFiles.push(file);\n\n      // 업로드 진행률 시뮬레이션\n      setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));\n      \n      // 가상의 업로드 진행률\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        setUploadProgress(prev => ({ ...prev, [file.name]: progress }));\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          setTimeout(() => {\n            setUploadProgress(prev => {\n              const newProgress = { ...prev };\n              delete newProgress[file.name];\n              return newProgress;\n            });\n          }, 500);\n        }\n      }, 100);\n    });\n\n    if (validFiles.length > 0) {\n      // 스마트 이미지 할당: 빈 슬롯부터 채우기\n      const updatedImages = [...images];\n      \n      // 각 valid 파일에 대해 첫 번째로 비어있는 슬롯에 __imageIndex 설정하여 추가\n      let validFileIndex = 0;\n      for (let i = 0; i < requiredImageCount && validFileIndex < validFiles.length; i++) {\n        // 해당 인덱스에 이미지가 없으면 새 파일 할당\n        const hasImageAtIndex = images.some(img => (img as any).__imageIndex === i);\n        if (!hasImageAtIndex) {\n          const file = validFiles[validFileIndex];\n          (file as any).__imageIndex = i;\n          updatedImages.push(file);\n          validFileIndex++;\n        }\n      }\n      \n      // 위치 정보 기준으로 정렬\n      updatedImages.sort((a, b) => {\n        const indexA = (a as any).__imageIndex ?? 0;\n        const indexB = (b as any).__imageIndex ?? 0;\n        return indexA - indexB;\n      });\n      \n      onChange(updatedImages, imageUploadMode);\n    }\n\n    setErrors(newErrors);\n  }, [images, imageUploadMode, requiredImageCount, onChange]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp'],\n      'video/*': ['.mp4', '.mov', '.avi', '.webm', '.mkv']\n    },\n    // 무제한 파일 업로드 허용 (빈 슬롯에 자동 할당)\n    maxFiles: undefined,\n    disabled: false\n  });\n\n  const removeImage = (imageIndex: number) => {\n    // 특정 __imageIndex를 가진 파일만 제거\n    const newImages = images.filter(img => (img as any).__imageIndex !== imageIndex);\n    onChange(newImages, imageUploadMode);\n  };\n\n  const handleModeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newMode = event.target.value as ImageUploadMode;\n    const scriptCount = Object.values(content).slice(1).filter(script => script?.trim()).length;\n\n    let newRequiredCount;\n    if (newMode === 'per-script') {\n      newRequiredCount = scriptCount;\n    } else if (newMode === 'per-two-scripts') {\n      newRequiredCount = Math.ceil(scriptCount / 2);\n    } else { // single-for-all\n      newRequiredCount = 1;\n    }\n\n    // 기존 이미지가 새로운 요구사항보다 많으면 자르기\n    const newImages = images.slice(0, newRequiredCount);\n    onChange(newImages, newMode);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getMediaPreview = (file: File) => {\n    return URL.createObjectURL(file);\n  };\n\n  const isVideoFile = (file: File) => {\n    return file.type.startsWith('video/');\n  };\n\n  // 위치 정보가 있는 실제 이미지 개수 계산\n  const getActualImageCount = () => {\n    return images.filter(img => typeof (img as any).__imageIndex === 'number').length;\n  };\n\n  const canProceed = getActualImageCount() === requiredImageCount;\n\n  // 자동 이미지 생성 함수\n  const handleAutoGenerate = async (mode: 'per_script' | 'per_two_scripts' | 'single_for_all') => {\n    setIsGenerating(true);\n    setErrors([]);\n    \n    try {\n      // content에서 body 텍스트들 추출\n      const bodyTexts = Object.entries(content)\n        .filter(([key, value]) => key.startsWith('body') && value?.trim())\n        .map(([key, value]) => value.trim());\n      \n      if (bodyTexts.length === 0) {\n        setErrors(['대본 내용이 없습니다. 먼저 대본을 작성해주세요.']);\n        setIsGenerating(false);\n        return;\n      }\n\n      setGenerationProgress('이미지 생성 중...');\n      \n      const response = await fetch('/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          texts: bodyTexts,\n          mode: mode,\n          job_id: jobId  // Job ID 추가\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || ' 이미지 생성에 실패했습니다');\n      }\n\n      const data = await response.json();\n      const imageUrls = data.image_urls;\n\n      setGenerationProgress('이미지 다운로드 중...');\n      \n      // 백엔드에서 저장된 이미지를 다운로드하고 File 객체로 변환\n      const imageFiles = await Promise.all(\n        imageUrls.filter((url: string) => url.trim() !== '').map(async (url: string, index: number) => {\n          // 백엔드와 같은 서버를 사용하므로 상대 경로로 접근\n          const fullUrl = url.startsWith('http') ? url : url;\n          const imageResponse = await fetch(fullUrl);\n          if (!imageResponse.ok) {\n            throw new Error(`이미지 다운로드 실패: ${index + 1}`);\n          }\n          \n          const blob = await imageResponse.blob();\n          const fileName = `generated_image_${index + 1}.png`;\n          const file = new File([blob], fileName, { type: 'image/png' });\n          \n          // 🔧 중요: TextImagePairManager에서 매칭을 위한 __imageIndex 설정\n          (file as any).__imageIndex = index;\n          \n          return file;\n        })\n      );\n\n      // 🔧 기존 이미지와 새로 생성된 이미지를 스마트하게 병합\n      // 빈 슬롯부터 채우고, imageIndex 순으로 정렬\n      const updatedImages = [...images];\n      \n      imageFiles.forEach((file) => {\n        const targetIndex = (file as any).__imageIndex;\n        // 해당 인덱스에 기존 이미지가 있으면 교체, 없으면 추가\n        const existingIndex = updatedImages.findIndex(img => (img as any).__imageIndex === targetIndex);\n        if (existingIndex >= 0) {\n          updatedImages[existingIndex] = file;\n        } else {\n          updatedImages.push(file);\n        }\n      });\n      \n      // imageIndex 순으로 정렬\n      updatedImages.sort((a, b) => {\n        const indexA = (a as any).__imageIndex ?? 0;\n        const indexB = (b as any).__imageIndex ?? 0;\n        return indexA - indexB;\n      });\n      \n      // 필요한 개수만큼만 유지\n      const finalImages = updatedImages.slice(0, requiredImageCount);\n      onChange(finalImages, imageUploadMode);\n      \n      const successCount = imageFiles.length;\n      const totalRequested = imageUrls.length;\n      \n      if (successCount === totalRequested) {\n        setGenerationProgress('이미지 생성 완료!');\n      } else {\n        setGenerationProgress(`이미지 생성 완료! (${successCount}/${totalRequested}개 성공)`);\n      }\n      \n      setTimeout(() => setGenerationProgress(''), 3000);\n      \n    } catch (error) {\n      console.error('이미지 생성 중 오류:', error);\n      setErrors([error instanceof Error ? error.message : '이미지 생성 중 오류가 발생했습니다']);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        미디어 업로드\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        릴스 영상의 배경으로 사용할 이미지 또는 영상을 업로드하세요. (이미지: JPG, PNG, GIF, WebP / 영상: MP4, MOV, AVI, WebM, MKV)\n      </Typography>\n\n      {/* 업로드 모드 선택 */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          업로드 모드 선택\n        </Typography>\n        \n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            value={imageUploadMode}\n            onChange={handleModeChange}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n              <FormControlLabel\n                value=\"per-two-scripts\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\">\n                      대사 2개마다 미디어 1개\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      필요 미디어: {Math.ceil(Object.values(content).slice(1).filter(script => script?.trim()).length / 2)}개 (각 최대 10MB)\n                    </Typography>\n                  </Box>\n                }\n              />\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<AutoFixHigh />}\n                onClick={() => handleAutoGenerate('per_two_scripts')}\n                disabled={isGenerating || Object.values(content).slice(1).filter(script => script?.trim()).length === 0}\n                sx={{ ml: 2, minWidth: 100 }}\n              >\n                자동생성\n              </Button>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n              <FormControlLabel\n                value=\"per-script\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\">\n                      대사마다 미디어 1개\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      필요 미디어: {Object.values(content).slice(1).filter(script => script?.trim()).length}개 (각 최대 10MB)\n                    </Typography>\n                  </Box>\n                }\n              />\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<AutoFixHigh />}\n                onClick={() => handleAutoGenerate('per_script')}\n                disabled={isGenerating || Object.values(content).slice(1).filter(script => script?.trim()).length === 0}\n                sx={{ ml: 2, minWidth: 100 }}\n              >\n                자동생성\n              </Button>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n              <FormControlLabel\n                value=\"single-for-all\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\">\n                      모든 대사에 미디어 1개\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      필요 미디어: 1개 (모든 대사에 동일한 미디어 사용, 최대 40MB)\n                    </Typography>\n                  </Box>\n                }\n              />\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<AutoFixHigh />}\n                onClick={() => handleAutoGenerate('single_for_all')}\n                disabled={isGenerating || Object.values(content).slice(1).filter(script => script?.trim()).length === 0}\n                sx={{ ml: 2, minWidth: 100 }}\n              >\n                자동생성\n              </Button>\n            </Box>\n          </RadioGroup>\n        </FormControl>\n        \n        {/* 생성 진행 상황 표시 */}\n        {isGenerating && (\n          <Box sx={{ mt: 2, display: 'flex', alignItems: 'center' }}>\n            <CircularProgress size={20} sx={{ mr: 1 }} />\n            <Typography variant=\"body2\" color=\"primary\">\n              {generationProgress}\n            </Typography>\n          </Box>\n        )}\n        \n        {generationProgress && !isGenerating && (\n          <Alert severity=\"success\" sx={{ mt: 2 }}>\n            {generationProgress}\n          </Alert>\n        )}\n      </Paper>\n\n      {/* 미디어 파일 멀티 드래그 영역 */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          미디어 파일 멀티 드래그 영역\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          여러 미디어 파일을 한 번에 드래그하여 업로드하세요. 빈 슬롯부터 자동으로 채워집니다.\n        </Typography>\n        \n        <Box\n          {...getRootProps()}\n          sx={{\n            border: 2,\n            borderColor: isDragActive ? 'primary.main' : 'grey.300',\n            borderStyle: 'dashed',\n            borderRadius: 2,\n            p: 4,\n            textAlign: 'center',\n            cursor: 'pointer',\n            bgcolor: isDragActive ? 'action.hover' : 'background.paper',\n            transition: 'all 0.2s ease-in-out',\n            '&:hover': {\n              borderColor: 'primary.main',\n              bgcolor: 'action.hover',\n            }\n          }}\n        >\n          <input {...getInputProps()} />\n          <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            {isDragActive ? '여기에 파일을 놓으세요' : '미디어 파일을 드래그하거나 클릭하여 선택'}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            지원 형식: JPG, PNG, GIF, WebP, BMP, MP4, MOV, AVI, WebM, MKV (최대 {imageUploadMode === 'single-for-all' ? '40MB' : '10MB'})\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            현재 상태: {getActualImageCount()}/{requiredImageCount}개\n          </Typography>\n        </Box>\n\n        {/* 업로드 진행률 */}\n        {Object.entries(uploadProgress).map(([filename, progress]) => (\n          <Box key={filename} sx={{ mt: 2 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {filename} 업로드 중...\n            </Typography>\n            <LinearProgress variant=\"determinate\" value={progress} sx={{ mt: 0.5 }} />\n          </Box>\n        ))}\n\n        {/* 에러 메시지 */}\n        {errors.map((error, index) => (\n          <Alert severity=\"error\" key={index} sx={{ mt: 2 }}>\n            {error}\n          </Alert>\n        ))}\n        \n        {/* 진행률 표시 */}\n        {canProceed && (\n          <Alert severity=\"success\" sx={{ mt: 2 }}>\n            모든 미디어가 업로드되었습니다! 다음 단계로 진행할 수 있습니다.\n          </Alert>\n        )}\n      </Paper>\n\n      {/* 텍스트-이미지 매칭 관리 영역 */}\n      <Box sx={{ mt: 4 }}>\n        <Divider sx={{ mb: 3 }} />\n        <TextImagePairManager\n          content={content}\n          imageUploadMode={imageUploadMode}\n          images={images}\n          jobId={jobId} // Job ID 전달\n          onChange={onChange}\n          onEditedTextsChange={onEditedTextsChange} // 수정된 텍스트 콜백 전달\n        />\n      </Box>\n\n      {/* 하단 버튼 */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\n        <Button\n          variant=\"outlined\"\n          onClick={onBack}\n          size=\"large\"\n        >\n          이전: 대본 작성\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={onNext}\n          size=\"large\"\n          disabled={!canProceed}\n        >\n          다음: 음악 선택\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ImageStep;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}